
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Contest
 * 
 */
export type Contest = $Result.DefaultSelection<Prisma.$ContestPayload>
/**
 * Model Topic
 * 
 */
export type Topic = $Result.DefaultSelection<Prisma.$TopicPayload>
/**
 * Model Subtopic
 * 
 */
export type Subtopic = $Result.DefaultSelection<Prisma.$SubtopicPayload>
/**
 * Model Card
 * 
 */
export type Card = $Result.DefaultSelection<Prisma.$CardPayload>
/**
 * Model UserCard
 * 
 */
export type UserCard = $Result.DefaultSelection<Prisma.$UserCardPayload>
/**
 * Model ContestTopic
 * 
 */
export type ContestTopic = $Result.DefaultSelection<Prisma.$ContestTopicPayload>
/**
 * Model StudySession
 * 
 */
export type StudySession = $Result.DefaultSelection<Prisma.$StudySessionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.contest`: Exposes CRUD operations for the **Contest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contests
    * const contests = await prisma.contest.findMany()
    * ```
    */
  get contest(): Prisma.ContestDelegate<ExtArgs>;

  /**
   * `prisma.topic`: Exposes CRUD operations for the **Topic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topic.findMany()
    * ```
    */
  get topic(): Prisma.TopicDelegate<ExtArgs>;

  /**
   * `prisma.subtopic`: Exposes CRUD operations for the **Subtopic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subtopics
    * const subtopics = await prisma.subtopic.findMany()
    * ```
    */
  get subtopic(): Prisma.SubtopicDelegate<ExtArgs>;

  /**
   * `prisma.card`: Exposes CRUD operations for the **Card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.CardDelegate<ExtArgs>;

  /**
   * `prisma.userCard`: Exposes CRUD operations for the **UserCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCards
    * const userCards = await prisma.userCard.findMany()
    * ```
    */
  get userCard(): Prisma.UserCardDelegate<ExtArgs>;

  /**
   * `prisma.contestTopic`: Exposes CRUD operations for the **ContestTopic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContestTopics
    * const contestTopics = await prisma.contestTopic.findMany()
    * ```
    */
  get contestTopic(): Prisma.ContestTopicDelegate<ExtArgs>;

  /**
   * `prisma.studySession`: Exposes CRUD operations for the **StudySession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudySessions
    * const studySessions = await prisma.studySession.findMany()
    * ```
    */
  get studySession(): Prisma.StudySessionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Contest: 'Contest',
    Topic: 'Topic',
    Subtopic: 'Subtopic',
    Card: 'Card',
    UserCard: 'UserCard',
    ContestTopic: 'ContestTopic',
    StudySession: 'StudySession'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "contest" | "topic" | "subtopic" | "card" | "userCard" | "contestTopic" | "studySession"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Contest: {
        payload: Prisma.$ContestPayload<ExtArgs>
        fields: Prisma.ContestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>
          }
          findFirst: {
            args: Prisma.ContestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>
          }
          findMany: {
            args: Prisma.ContestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>[]
          }
          create: {
            args: Prisma.ContestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>
          }
          createMany: {
            args: Prisma.ContestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>[]
          }
          delete: {
            args: Prisma.ContestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>
          }
          update: {
            args: Prisma.ContestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>
          }
          deleteMany: {
            args: Prisma.ContestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestPayload>
          }
          aggregate: {
            args: Prisma.ContestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContest>
          }
          groupBy: {
            args: Prisma.ContestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContestCountArgs<ExtArgs>
            result: $Utils.Optional<ContestCountAggregateOutputType> | number
          }
        }
      }
      Topic: {
        payload: Prisma.$TopicPayload<ExtArgs>
        fields: Prisma.TopicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TopicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TopicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          findFirst: {
            args: Prisma.TopicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TopicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          findMany: {
            args: Prisma.TopicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>[]
          }
          create: {
            args: Prisma.TopicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          createMany: {
            args: Prisma.TopicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TopicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>[]
          }
          delete: {
            args: Prisma.TopicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          update: {
            args: Prisma.TopicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          deleteMany: {
            args: Prisma.TopicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TopicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TopicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TopicPayload>
          }
          aggregate: {
            args: Prisma.TopicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTopic>
          }
          groupBy: {
            args: Prisma.TopicGroupByArgs<ExtArgs>
            result: $Utils.Optional<TopicGroupByOutputType>[]
          }
          count: {
            args: Prisma.TopicCountArgs<ExtArgs>
            result: $Utils.Optional<TopicCountAggregateOutputType> | number
          }
        }
      }
      Subtopic: {
        payload: Prisma.$SubtopicPayload<ExtArgs>
        fields: Prisma.SubtopicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubtopicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubtopicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          findFirst: {
            args: Prisma.SubtopicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubtopicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          findMany: {
            args: Prisma.SubtopicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>[]
          }
          create: {
            args: Prisma.SubtopicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          createMany: {
            args: Prisma.SubtopicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubtopicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>[]
          }
          delete: {
            args: Prisma.SubtopicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          update: {
            args: Prisma.SubtopicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          deleteMany: {
            args: Prisma.SubtopicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubtopicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubtopicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubtopicPayload>
          }
          aggregate: {
            args: Prisma.SubtopicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubtopic>
          }
          groupBy: {
            args: Prisma.SubtopicGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubtopicGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubtopicCountArgs<ExtArgs>
            result: $Utils.Optional<SubtopicCountAggregateOutputType> | number
          }
        }
      }
      Card: {
        payload: Prisma.$CardPayload<ExtArgs>
        fields: Prisma.CardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findFirst: {
            args: Prisma.CardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findMany: {
            args: Prisma.CardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          create: {
            args: Prisma.CardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          createMany: {
            args: Prisma.CardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          delete: {
            args: Prisma.CardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          update: {
            args: Prisma.CardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          deleteMany: {
            args: Prisma.CardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          aggregate: {
            args: Prisma.CardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCard>
          }
          groupBy: {
            args: Prisma.CardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardCountArgs<ExtArgs>
            result: $Utils.Optional<CardCountAggregateOutputType> | number
          }
        }
      }
      UserCard: {
        payload: Prisma.$UserCardPayload<ExtArgs>
        fields: Prisma.UserCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>
          }
          findFirst: {
            args: Prisma.UserCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>
          }
          findMany: {
            args: Prisma.UserCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>[]
          }
          create: {
            args: Prisma.UserCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>
          }
          createMany: {
            args: Prisma.UserCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>[]
          }
          delete: {
            args: Prisma.UserCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>
          }
          update: {
            args: Prisma.UserCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>
          }
          deleteMany: {
            args: Prisma.UserCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserCardPayload>
          }
          aggregate: {
            args: Prisma.UserCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserCard>
          }
          groupBy: {
            args: Prisma.UserCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCardCountArgs<ExtArgs>
            result: $Utils.Optional<UserCardCountAggregateOutputType> | number
          }
        }
      }
      ContestTopic: {
        payload: Prisma.$ContestTopicPayload<ExtArgs>
        fields: Prisma.ContestTopicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContestTopicFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContestTopicFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>
          }
          findFirst: {
            args: Prisma.ContestTopicFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContestTopicFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>
          }
          findMany: {
            args: Prisma.ContestTopicFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>[]
          }
          create: {
            args: Prisma.ContestTopicCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>
          }
          createMany: {
            args: Prisma.ContestTopicCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContestTopicCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>[]
          }
          delete: {
            args: Prisma.ContestTopicDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>
          }
          update: {
            args: Prisma.ContestTopicUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>
          }
          deleteMany: {
            args: Prisma.ContestTopicDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContestTopicUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContestTopicUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContestTopicPayload>
          }
          aggregate: {
            args: Prisma.ContestTopicAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContestTopic>
          }
          groupBy: {
            args: Prisma.ContestTopicGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContestTopicGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContestTopicCountArgs<ExtArgs>
            result: $Utils.Optional<ContestTopicCountAggregateOutputType> | number
          }
        }
      }
      StudySession: {
        payload: Prisma.$StudySessionPayload<ExtArgs>
        fields: Prisma.StudySessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudySessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudySessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          findFirst: {
            args: Prisma.StudySessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudySessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          findMany: {
            args: Prisma.StudySessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>[]
          }
          create: {
            args: Prisma.StudySessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          createMany: {
            args: Prisma.StudySessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudySessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>[]
          }
          delete: {
            args: Prisma.StudySessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          update: {
            args: Prisma.StudySessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          deleteMany: {
            args: Prisma.StudySessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudySessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudySessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          aggregate: {
            args: Prisma.StudySessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudySession>
          }
          groupBy: {
            args: Prisma.StudySessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudySessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudySessionCountArgs<ExtArgs>
            result: $Utils.Optional<StudySessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    contests: number
    cards: number
    userCards: number
    contestTopics: number
    studySessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contests?: boolean | UserCountOutputTypeCountContestsArgs
    cards?: boolean | UserCountOutputTypeCountCardsArgs
    userCards?: boolean | UserCountOutputTypeCountUserCardsArgs
    contestTopics?: boolean | UserCountOutputTypeCountContestTopicsArgs
    studySessions?: boolean | UserCountOutputTypeCountStudySessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContestTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContestTopicWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
  }


  /**
   * Count Type ContestCountOutputType
   */

  export type ContestCountOutputType = {
    contestTopics: number
    userCards: number
    studySessions: number
  }

  export type ContestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contestTopics?: boolean | ContestCountOutputTypeCountContestTopicsArgs
    userCards?: boolean | ContestCountOutputTypeCountUserCardsArgs
    studySessions?: boolean | ContestCountOutputTypeCountStudySessionsArgs
  }

  // Custom InputTypes
  /**
   * ContestCountOutputType without action
   */
  export type ContestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestCountOutputType
     */
    select?: ContestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContestCountOutputType without action
   */
  export type ContestCountOutputTypeCountContestTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContestTopicWhereInput
  }

  /**
   * ContestCountOutputType without action
   */
  export type ContestCountOutputTypeCountUserCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardWhereInput
  }

  /**
   * ContestCountOutputType without action
   */
  export type ContestCountOutputTypeCountStudySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
  }


  /**
   * Count Type TopicCountOutputType
   */

  export type TopicCountOutputType = {
    subtopics: number
    contestTopics: number
  }

  export type TopicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtopics?: boolean | TopicCountOutputTypeCountSubtopicsArgs
    contestTopics?: boolean | TopicCountOutputTypeCountContestTopicsArgs
  }

  // Custom InputTypes
  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TopicCountOutputType
     */
    select?: TopicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountSubtopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtopicWhereInput
  }

  /**
   * TopicCountOutputType without action
   */
  export type TopicCountOutputTypeCountContestTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContestTopicWhereInput
  }


  /**
   * Count Type SubtopicCountOutputType
   */

  export type SubtopicCountOutputType = {
    cards: number
    userCards: number
    studySessions: number
  }

  export type SubtopicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | SubtopicCountOutputTypeCountCardsArgs
    userCards?: boolean | SubtopicCountOutputTypeCountUserCardsArgs
    studySessions?: boolean | SubtopicCountOutputTypeCountStudySessionsArgs
  }

  // Custom InputTypes
  /**
   * SubtopicCountOutputType without action
   */
  export type SubtopicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubtopicCountOutputType
     */
    select?: SubtopicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubtopicCountOutputType without action
   */
  export type SubtopicCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }

  /**
   * SubtopicCountOutputType without action
   */
  export type SubtopicCountOutputTypeCountUserCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardWhereInput
  }

  /**
   * SubtopicCountOutputType without action
   */
  export type SubtopicCountOutputTypeCountStudySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
  }


  /**
   * Count Type CardCountOutputType
   */

  export type CardCountOutputType = {
    userCards: number
    studySessions: number
  }

  export type CardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userCards?: boolean | CardCountOutputTypeCountUserCardsArgs
    studySessions?: boolean | CardCountOutputTypeCountStudySessionsArgs
  }

  // Custom InputTypes
  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardCountOutputType
     */
    select?: CardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountUserCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountStudySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    subscriptionTier: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    subscriptionTier: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    subscriptionTier: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    subscriptionTier?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    subscriptionTier?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    subscriptionTier?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    password: string
    subscriptionTier: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    subscriptionTier?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contests?: boolean | User$contestsArgs<ExtArgs>
    cards?: boolean | User$cardsArgs<ExtArgs>
    userCards?: boolean | User$userCardsArgs<ExtArgs>
    contestTopics?: boolean | User$contestTopicsArgs<ExtArgs>
    studySessions?: boolean | User$studySessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    subscriptionTier?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    subscriptionTier?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contests?: boolean | User$contestsArgs<ExtArgs>
    cards?: boolean | User$cardsArgs<ExtArgs>
    userCards?: boolean | User$userCardsArgs<ExtArgs>
    contestTopics?: boolean | User$contestTopicsArgs<ExtArgs>
    studySessions?: boolean | User$studySessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      contests: Prisma.$ContestPayload<ExtArgs>[]
      cards: Prisma.$CardPayload<ExtArgs>[]
      userCards: Prisma.$UserCardPayload<ExtArgs>[]
      contestTopics: Prisma.$ContestTopicPayload<ExtArgs>[]
      studySessions: Prisma.$StudySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      password: string
      subscriptionTier: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contests<T extends User$contestsArgs<ExtArgs> = {}>(args?: Subset<T, User$contestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findMany"> | Null>
    cards<T extends User$cardsArgs<ExtArgs> = {}>(args?: Subset<T, User$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany"> | Null>
    userCards<T extends User$userCardsArgs<ExtArgs> = {}>(args?: Subset<T, User$userCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findMany"> | Null>
    contestTopics<T extends User$contestTopicsArgs<ExtArgs> = {}>(args?: Subset<T, User$contestTopicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findMany"> | Null>
    studySessions<T extends User$studySessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$studySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly subscriptionTier: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.contests
   */
  export type User$contestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    where?: ContestWhereInput
    orderBy?: ContestOrderByWithRelationInput | ContestOrderByWithRelationInput[]
    cursor?: ContestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContestScalarFieldEnum | ContestScalarFieldEnum[]
  }

  /**
   * User.cards
   */
  export type User$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * User.userCards
   */
  export type User$userCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    where?: UserCardWhereInput
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    cursor?: UserCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCardScalarFieldEnum | UserCardScalarFieldEnum[]
  }

  /**
   * User.contestTopics
   */
  export type User$contestTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    where?: ContestTopicWhereInput
    orderBy?: ContestTopicOrderByWithRelationInput | ContestTopicOrderByWithRelationInput[]
    cursor?: ContestTopicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContestTopicScalarFieldEnum | ContestTopicScalarFieldEnum[]
  }

  /**
   * User.studySessions
   */
  export type User$studySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    cursor?: StudySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Contest
   */

  export type AggregateContest = {
    _count: ContestCountAggregateOutputType | null
    _min: ContestMinAggregateOutputType | null
    _max: ContestMaxAggregateOutputType | null
  }

  export type ContestMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    editalFileId: string | null
    parsedEditalData: string | null
    processingError: string | null
    isProcessing: boolean | null
    targetDate: Date | null
    examDate: string | null
    selectedOffice: string | null
    institution: string | null
    position: string | null
    noticeStorageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContestMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    editalFileId: string | null
    parsedEditalData: string | null
    processingError: string | null
    isProcessing: boolean | null
    targetDate: Date | null
    examDate: string | null
    selectedOffice: string | null
    institution: string | null
    position: string | null
    noticeStorageId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContestCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    editalFileId: number
    parsedEditalData: number
    processingError: number
    isProcessing: number
    targetDate: number
    examDate: number
    selectedOffice: number
    institution: number
    position: number
    noticeStorageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContestMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    editalFileId?: true
    parsedEditalData?: true
    processingError?: true
    isProcessing?: true
    targetDate?: true
    examDate?: true
    selectedOffice?: true
    institution?: true
    position?: true
    noticeStorageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContestMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    editalFileId?: true
    parsedEditalData?: true
    processingError?: true
    isProcessing?: true
    targetDate?: true
    examDate?: true
    selectedOffice?: true
    institution?: true
    position?: true
    noticeStorageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContestCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    editalFileId?: true
    parsedEditalData?: true
    processingError?: true
    isProcessing?: true
    targetDate?: true
    examDate?: true
    selectedOffice?: true
    institution?: true
    position?: true
    noticeStorageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contest to aggregate.
     */
    where?: ContestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contests to fetch.
     */
    orderBy?: ContestOrderByWithRelationInput | ContestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contests
    **/
    _count?: true | ContestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContestMaxAggregateInputType
  }

  export type GetContestAggregateType<T extends ContestAggregateArgs> = {
        [P in keyof T & keyof AggregateContest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContest[P]>
      : GetScalarType<T[P], AggregateContest[P]>
  }




  export type ContestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContestWhereInput
    orderBy?: ContestOrderByWithAggregationInput | ContestOrderByWithAggregationInput[]
    by: ContestScalarFieldEnum[] | ContestScalarFieldEnum
    having?: ContestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContestCountAggregateInputType | true
    _min?: ContestMinAggregateInputType
    _max?: ContestMaxAggregateInputType
  }

  export type ContestGroupByOutputType = {
    id: string
    userId: string
    name: string
    description: string | null
    editalFileId: string | null
    parsedEditalData: string | null
    processingError: string | null
    isProcessing: boolean
    targetDate: Date | null
    examDate: string | null
    selectedOffice: string | null
    institution: string | null
    position: string | null
    noticeStorageId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ContestCountAggregateOutputType | null
    _min: ContestMinAggregateOutputType | null
    _max: ContestMaxAggregateOutputType | null
  }

  type GetContestGroupByPayload<T extends ContestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContestGroupByOutputType[P]>
            : GetScalarType<T[P], ContestGroupByOutputType[P]>
        }
      >
    >


  export type ContestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    editalFileId?: boolean
    parsedEditalData?: boolean
    processingError?: boolean
    isProcessing?: boolean
    targetDate?: boolean
    examDate?: boolean
    selectedOffice?: boolean
    institution?: boolean
    position?: boolean
    noticeStorageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    contestTopics?: boolean | Contest$contestTopicsArgs<ExtArgs>
    userCards?: boolean | Contest$userCardsArgs<ExtArgs>
    studySessions?: boolean | Contest$studySessionsArgs<ExtArgs>
    _count?: boolean | ContestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contest"]>

  export type ContestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    editalFileId?: boolean
    parsedEditalData?: boolean
    processingError?: boolean
    isProcessing?: boolean
    targetDate?: boolean
    examDate?: boolean
    selectedOffice?: boolean
    institution?: boolean
    position?: boolean
    noticeStorageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contest"]>

  export type ContestSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    editalFileId?: boolean
    parsedEditalData?: boolean
    processingError?: boolean
    isProcessing?: boolean
    targetDate?: boolean
    examDate?: boolean
    selectedOffice?: boolean
    institution?: boolean
    position?: boolean
    noticeStorageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    contestTopics?: boolean | Contest$contestTopicsArgs<ExtArgs>
    userCards?: boolean | Contest$userCardsArgs<ExtArgs>
    studySessions?: boolean | Contest$studySessionsArgs<ExtArgs>
    _count?: boolean | ContestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      contestTopics: Prisma.$ContestTopicPayload<ExtArgs>[]
      userCards: Prisma.$UserCardPayload<ExtArgs>[]
      studySessions: Prisma.$StudySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      description: string | null
      editalFileId: string | null
      parsedEditalData: string | null
      processingError: string | null
      isProcessing: boolean
      targetDate: Date | null
      examDate: string | null
      selectedOffice: string | null
      institution: string | null
      position: string | null
      noticeStorageId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contest"]>
    composites: {}
  }

  type ContestGetPayload<S extends boolean | null | undefined | ContestDefaultArgs> = $Result.GetResult<Prisma.$ContestPayload, S>

  type ContestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContestCountAggregateInputType | true
    }

  export interface ContestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contest'], meta: { name: 'Contest' } }
    /**
     * Find zero or one Contest that matches the filter.
     * @param {ContestFindUniqueArgs} args - Arguments to find a Contest
     * @example
     * // Get one Contest
     * const contest = await prisma.contest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContestFindUniqueArgs>(args: SelectSubset<T, ContestFindUniqueArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContestFindUniqueOrThrowArgs} args - Arguments to find a Contest
     * @example
     * // Get one Contest
     * const contest = await prisma.contest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContestFindUniqueOrThrowArgs>(args: SelectSubset<T, ContestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestFindFirstArgs} args - Arguments to find a Contest
     * @example
     * // Get one Contest
     * const contest = await prisma.contest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContestFindFirstArgs>(args?: SelectSubset<T, ContestFindFirstArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestFindFirstOrThrowArgs} args - Arguments to find a Contest
     * @example
     * // Get one Contest
     * const contest = await prisma.contest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContestFindFirstOrThrowArgs>(args?: SelectSubset<T, ContestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contests
     * const contests = await prisma.contest.findMany()
     * 
     * // Get first 10 Contests
     * const contests = await prisma.contest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contestWithIdOnly = await prisma.contest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContestFindManyArgs>(args?: SelectSubset<T, ContestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contest.
     * @param {ContestCreateArgs} args - Arguments to create a Contest.
     * @example
     * // Create one Contest
     * const Contest = await prisma.contest.create({
     *   data: {
     *     // ... data to create a Contest
     *   }
     * })
     * 
     */
    create<T extends ContestCreateArgs>(args: SelectSubset<T, ContestCreateArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contests.
     * @param {ContestCreateManyArgs} args - Arguments to create many Contests.
     * @example
     * // Create many Contests
     * const contest = await prisma.contest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContestCreateManyArgs>(args?: SelectSubset<T, ContestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contests and returns the data saved in the database.
     * @param {ContestCreateManyAndReturnArgs} args - Arguments to create many Contests.
     * @example
     * // Create many Contests
     * const contest = await prisma.contest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contests and only return the `id`
     * const contestWithIdOnly = await prisma.contest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContestCreateManyAndReturnArgs>(args?: SelectSubset<T, ContestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contest.
     * @param {ContestDeleteArgs} args - Arguments to delete one Contest.
     * @example
     * // Delete one Contest
     * const Contest = await prisma.contest.delete({
     *   where: {
     *     // ... filter to delete one Contest
     *   }
     * })
     * 
     */
    delete<T extends ContestDeleteArgs>(args: SelectSubset<T, ContestDeleteArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contest.
     * @param {ContestUpdateArgs} args - Arguments to update one Contest.
     * @example
     * // Update one Contest
     * const contest = await prisma.contest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContestUpdateArgs>(args: SelectSubset<T, ContestUpdateArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contests.
     * @param {ContestDeleteManyArgs} args - Arguments to filter Contests to delete.
     * @example
     * // Delete a few Contests
     * const { count } = await prisma.contest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContestDeleteManyArgs>(args?: SelectSubset<T, ContestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contests
     * const contest = await prisma.contest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContestUpdateManyArgs>(args: SelectSubset<T, ContestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contest.
     * @param {ContestUpsertArgs} args - Arguments to update or create a Contest.
     * @example
     * // Update or create a Contest
     * const contest = await prisma.contest.upsert({
     *   create: {
     *     // ... data to create a Contest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contest we want to update
     *   }
     * })
     */
    upsert<T extends ContestUpsertArgs>(args: SelectSubset<T, ContestUpsertArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestCountArgs} args - Arguments to filter Contests to count.
     * @example
     * // Count the number of Contests
     * const count = await prisma.contest.count({
     *   where: {
     *     // ... the filter for the Contests we want to count
     *   }
     * })
    **/
    count<T extends ContestCountArgs>(
      args?: Subset<T, ContestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContestAggregateArgs>(args: Subset<T, ContestAggregateArgs>): Prisma.PrismaPromise<GetContestAggregateType<T>>

    /**
     * Group by Contest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContestGroupByArgs['orderBy'] }
        : { orderBy?: ContestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contest model
   */
  readonly fields: ContestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contestTopics<T extends Contest$contestTopicsArgs<ExtArgs> = {}>(args?: Subset<T, Contest$contestTopicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findMany"> | Null>
    userCards<T extends Contest$userCardsArgs<ExtArgs> = {}>(args?: Subset<T, Contest$userCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findMany"> | Null>
    studySessions<T extends Contest$studySessionsArgs<ExtArgs> = {}>(args?: Subset<T, Contest$studySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contest model
   */ 
  interface ContestFieldRefs {
    readonly id: FieldRef<"Contest", 'String'>
    readonly userId: FieldRef<"Contest", 'String'>
    readonly name: FieldRef<"Contest", 'String'>
    readonly description: FieldRef<"Contest", 'String'>
    readonly editalFileId: FieldRef<"Contest", 'String'>
    readonly parsedEditalData: FieldRef<"Contest", 'String'>
    readonly processingError: FieldRef<"Contest", 'String'>
    readonly isProcessing: FieldRef<"Contest", 'Boolean'>
    readonly targetDate: FieldRef<"Contest", 'DateTime'>
    readonly examDate: FieldRef<"Contest", 'String'>
    readonly selectedOffice: FieldRef<"Contest", 'String'>
    readonly institution: FieldRef<"Contest", 'String'>
    readonly position: FieldRef<"Contest", 'String'>
    readonly noticeStorageId: FieldRef<"Contest", 'String'>
    readonly createdAt: FieldRef<"Contest", 'DateTime'>
    readonly updatedAt: FieldRef<"Contest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contest findUnique
   */
  export type ContestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * Filter, which Contest to fetch.
     */
    where: ContestWhereUniqueInput
  }

  /**
   * Contest findUniqueOrThrow
   */
  export type ContestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * Filter, which Contest to fetch.
     */
    where: ContestWhereUniqueInput
  }

  /**
   * Contest findFirst
   */
  export type ContestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * Filter, which Contest to fetch.
     */
    where?: ContestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contests to fetch.
     */
    orderBy?: ContestOrderByWithRelationInput | ContestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contests.
     */
    cursor?: ContestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contests.
     */
    distinct?: ContestScalarFieldEnum | ContestScalarFieldEnum[]
  }

  /**
   * Contest findFirstOrThrow
   */
  export type ContestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * Filter, which Contest to fetch.
     */
    where?: ContestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contests to fetch.
     */
    orderBy?: ContestOrderByWithRelationInput | ContestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contests.
     */
    cursor?: ContestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contests.
     */
    distinct?: ContestScalarFieldEnum | ContestScalarFieldEnum[]
  }

  /**
   * Contest findMany
   */
  export type ContestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * Filter, which Contests to fetch.
     */
    where?: ContestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contests to fetch.
     */
    orderBy?: ContestOrderByWithRelationInput | ContestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contests.
     */
    cursor?: ContestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contests.
     */
    skip?: number
    distinct?: ContestScalarFieldEnum | ContestScalarFieldEnum[]
  }

  /**
   * Contest create
   */
  export type ContestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * The data needed to create a Contest.
     */
    data: XOR<ContestCreateInput, ContestUncheckedCreateInput>
  }

  /**
   * Contest createMany
   */
  export type ContestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contests.
     */
    data: ContestCreateManyInput | ContestCreateManyInput[]
  }

  /**
   * Contest createManyAndReturn
   */
  export type ContestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contests.
     */
    data: ContestCreateManyInput | ContestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contest update
   */
  export type ContestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * The data needed to update a Contest.
     */
    data: XOR<ContestUpdateInput, ContestUncheckedUpdateInput>
    /**
     * Choose, which Contest to update.
     */
    where: ContestWhereUniqueInput
  }

  /**
   * Contest updateMany
   */
  export type ContestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contests.
     */
    data: XOR<ContestUpdateManyMutationInput, ContestUncheckedUpdateManyInput>
    /**
     * Filter which Contests to update
     */
    where?: ContestWhereInput
  }

  /**
   * Contest upsert
   */
  export type ContestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * The filter to search for the Contest to update in case it exists.
     */
    where: ContestWhereUniqueInput
    /**
     * In case the Contest found by the `where` argument doesn't exist, create a new Contest with this data.
     */
    create: XOR<ContestCreateInput, ContestUncheckedCreateInput>
    /**
     * In case the Contest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContestUpdateInput, ContestUncheckedUpdateInput>
  }

  /**
   * Contest delete
   */
  export type ContestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
    /**
     * Filter which Contest to delete.
     */
    where: ContestWhereUniqueInput
  }

  /**
   * Contest deleteMany
   */
  export type ContestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contests to delete
     */
    where?: ContestWhereInput
  }

  /**
   * Contest.contestTopics
   */
  export type Contest$contestTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    where?: ContestTopicWhereInput
    orderBy?: ContestTopicOrderByWithRelationInput | ContestTopicOrderByWithRelationInput[]
    cursor?: ContestTopicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContestTopicScalarFieldEnum | ContestTopicScalarFieldEnum[]
  }

  /**
   * Contest.userCards
   */
  export type Contest$userCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    where?: UserCardWhereInput
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    cursor?: UserCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCardScalarFieldEnum | UserCardScalarFieldEnum[]
  }

  /**
   * Contest.studySessions
   */
  export type Contest$studySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    cursor?: StudySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * Contest without action
   */
  export type ContestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contest
     */
    select?: ContestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestInclude<ExtArgs> | null
  }


  /**
   * Model Topic
   */

  export type AggregateTopic = {
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  export type TopicAvgAggregateOutputType = {
    priority: number | null
  }

  export type TopicSumAggregateOutputType = {
    priority: number | null
  }

  export type TopicMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TopicMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TopicCountAggregateOutputType = {
    id: number
    name: number
    description: number
    priority: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TopicAvgAggregateInputType = {
    priority?: true
  }

  export type TopicSumAggregateInputType = {
    priority?: true
  }

  export type TopicMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TopicMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TopicCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Topic to aggregate.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Topics
    **/
    _count?: true | TopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicMaxAggregateInputType
  }

  export type GetTopicAggregateType<T extends TopicAggregateArgs> = {
        [P in keyof T & keyof AggregateTopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopic[P]>
      : GetScalarType<T[P], AggregateTopic[P]>
  }




  export type TopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TopicWhereInput
    orderBy?: TopicOrderByWithAggregationInput | TopicOrderByWithAggregationInput[]
    by: TopicScalarFieldEnum[] | TopicScalarFieldEnum
    having?: TopicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicCountAggregateInputType | true
    _avg?: TopicAvgAggregateInputType
    _sum?: TopicSumAggregateInputType
    _min?: TopicMinAggregateInputType
    _max?: TopicMaxAggregateInputType
  }

  export type TopicGroupByOutputType = {
    id: string
    name: string
    description: string | null
    priority: number | null
    createdAt: Date
    updatedAt: Date
    _count: TopicCountAggregateOutputType | null
    _avg: TopicAvgAggregateOutputType | null
    _sum: TopicSumAggregateOutputType | null
    _min: TopicMinAggregateOutputType | null
    _max: TopicMaxAggregateOutputType | null
  }

  type GetTopicGroupByPayload<T extends TopicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicGroupByOutputType[P]>
            : GetScalarType<T[P], TopicGroupByOutputType[P]>
        }
      >
    >


  export type TopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subtopics?: boolean | Topic$subtopicsArgs<ExtArgs>
    contestTopics?: boolean | Topic$contestTopicsArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["topic"]>

  export type TopicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["topic"]>

  export type TopicSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtopics?: boolean | Topic$subtopicsArgs<ExtArgs>
    contestTopics?: boolean | Topic$contestTopicsArgs<ExtArgs>
    _count?: boolean | TopicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TopicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Topic"
    objects: {
      subtopics: Prisma.$SubtopicPayload<ExtArgs>[]
      contestTopics: Prisma.$ContestTopicPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      priority: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["topic"]>
    composites: {}
  }

  type TopicGetPayload<S extends boolean | null | undefined | TopicDefaultArgs> = $Result.GetResult<Prisma.$TopicPayload, S>

  type TopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TopicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TopicCountAggregateInputType | true
    }

  export interface TopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Topic'], meta: { name: 'Topic' } }
    /**
     * Find zero or one Topic that matches the filter.
     * @param {TopicFindUniqueArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TopicFindUniqueArgs>(args: SelectSubset<T, TopicFindUniqueArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Topic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TopicFindUniqueOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TopicFindUniqueOrThrowArgs>(args: SelectSubset<T, TopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Topic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindFirstArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TopicFindFirstArgs>(args?: SelectSubset<T, TopicFindFirstArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Topic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindFirstOrThrowArgs} args - Arguments to find a Topic
     * @example
     * // Get one Topic
     * const topic = await prisma.topic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TopicFindFirstOrThrowArgs>(args?: SelectSubset<T, TopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Topics
     * const topics = await prisma.topic.findMany()
     * 
     * // Get first 10 Topics
     * const topics = await prisma.topic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const topicWithIdOnly = await prisma.topic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TopicFindManyArgs>(args?: SelectSubset<T, TopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Topic.
     * @param {TopicCreateArgs} args - Arguments to create a Topic.
     * @example
     * // Create one Topic
     * const Topic = await prisma.topic.create({
     *   data: {
     *     // ... data to create a Topic
     *   }
     * })
     * 
     */
    create<T extends TopicCreateArgs>(args: SelectSubset<T, TopicCreateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Topics.
     * @param {TopicCreateManyArgs} args - Arguments to create many Topics.
     * @example
     * // Create many Topics
     * const topic = await prisma.topic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TopicCreateManyArgs>(args?: SelectSubset<T, TopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Topics and returns the data saved in the database.
     * @param {TopicCreateManyAndReturnArgs} args - Arguments to create many Topics.
     * @example
     * // Create many Topics
     * const topic = await prisma.topic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Topics and only return the `id`
     * const topicWithIdOnly = await prisma.topic.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TopicCreateManyAndReturnArgs>(args?: SelectSubset<T, TopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Topic.
     * @param {TopicDeleteArgs} args - Arguments to delete one Topic.
     * @example
     * // Delete one Topic
     * const Topic = await prisma.topic.delete({
     *   where: {
     *     // ... filter to delete one Topic
     *   }
     * })
     * 
     */
    delete<T extends TopicDeleteArgs>(args: SelectSubset<T, TopicDeleteArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Topic.
     * @param {TopicUpdateArgs} args - Arguments to update one Topic.
     * @example
     * // Update one Topic
     * const topic = await prisma.topic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TopicUpdateArgs>(args: SelectSubset<T, TopicUpdateArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Topics.
     * @param {TopicDeleteManyArgs} args - Arguments to filter Topics to delete.
     * @example
     * // Delete a few Topics
     * const { count } = await prisma.topic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TopicDeleteManyArgs>(args?: SelectSubset<T, TopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Topics
     * const topic = await prisma.topic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TopicUpdateManyArgs>(args: SelectSubset<T, TopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Topic.
     * @param {TopicUpsertArgs} args - Arguments to update or create a Topic.
     * @example
     * // Update or create a Topic
     * const topic = await prisma.topic.upsert({
     *   create: {
     *     // ... data to create a Topic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topic we want to update
     *   }
     * })
     */
    upsert<T extends TopicUpsertArgs>(args: SelectSubset<T, TopicUpsertArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicCountArgs} args - Arguments to filter Topics to count.
     * @example
     * // Count the number of Topics
     * const count = await prisma.topic.count({
     *   where: {
     *     // ... the filter for the Topics we want to count
     *   }
     * })
    **/
    count<T extends TopicCountArgs>(
      args?: Subset<T, TopicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicAggregateArgs>(args: Subset<T, TopicAggregateArgs>): Prisma.PrismaPromise<GetTopicAggregateType<T>>

    /**
     * Group by Topic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicGroupByArgs['orderBy'] }
        : { orderBy?: TopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Topic model
   */
  readonly fields: TopicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Topic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subtopics<T extends Topic$subtopicsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$subtopicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findMany"> | Null>
    contestTopics<T extends Topic$contestTopicsArgs<ExtArgs> = {}>(args?: Subset<T, Topic$contestTopicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Topic model
   */ 
  interface TopicFieldRefs {
    readonly id: FieldRef<"Topic", 'String'>
    readonly name: FieldRef<"Topic", 'String'>
    readonly description: FieldRef<"Topic", 'String'>
    readonly priority: FieldRef<"Topic", 'Int'>
    readonly createdAt: FieldRef<"Topic", 'DateTime'>
    readonly updatedAt: FieldRef<"Topic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Topic findUnique
   */
  export type TopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic findUniqueOrThrow
   */
  export type TopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic findFirst
   */
  export type TopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic findFirstOrThrow
   */
  export type TopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topic to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Topics.
     */
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic findMany
   */
  export type TopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter, which Topics to fetch.
     */
    where?: TopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Topics to fetch.
     */
    orderBy?: TopicOrderByWithRelationInput | TopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Topics.
     */
    cursor?: TopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Topics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Topics.
     */
    skip?: number
    distinct?: TopicScalarFieldEnum | TopicScalarFieldEnum[]
  }

  /**
   * Topic create
   */
  export type TopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The data needed to create a Topic.
     */
    data: XOR<TopicCreateInput, TopicUncheckedCreateInput>
  }

  /**
   * Topic createMany
   */
  export type TopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Topics.
     */
    data: TopicCreateManyInput | TopicCreateManyInput[]
  }

  /**
   * Topic createManyAndReturn
   */
  export type TopicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Topics.
     */
    data: TopicCreateManyInput | TopicCreateManyInput[]
  }

  /**
   * Topic update
   */
  export type TopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The data needed to update a Topic.
     */
    data: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
    /**
     * Choose, which Topic to update.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic updateMany
   */
  export type TopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Topics.
     */
    data: XOR<TopicUpdateManyMutationInput, TopicUncheckedUpdateManyInput>
    /**
     * Filter which Topics to update
     */
    where?: TopicWhereInput
  }

  /**
   * Topic upsert
   */
  export type TopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * The filter to search for the Topic to update in case it exists.
     */
    where: TopicWhereUniqueInput
    /**
     * In case the Topic found by the `where` argument doesn't exist, create a new Topic with this data.
     */
    create: XOR<TopicCreateInput, TopicUncheckedCreateInput>
    /**
     * In case the Topic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TopicUpdateInput, TopicUncheckedUpdateInput>
  }

  /**
   * Topic delete
   */
  export type TopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
    /**
     * Filter which Topic to delete.
     */
    where: TopicWhereUniqueInput
  }

  /**
   * Topic deleteMany
   */
  export type TopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Topics to delete
     */
    where?: TopicWhereInput
  }

  /**
   * Topic.subtopics
   */
  export type Topic$subtopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    where?: SubtopicWhereInput
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    cursor?: SubtopicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Topic.contestTopics
   */
  export type Topic$contestTopicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    where?: ContestTopicWhereInput
    orderBy?: ContestTopicOrderByWithRelationInput | ContestTopicOrderByWithRelationInput[]
    cursor?: ContestTopicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContestTopicScalarFieldEnum | ContestTopicScalarFieldEnum[]
  }

  /**
   * Topic without action
   */
  export type TopicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Topic
     */
    select?: TopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TopicInclude<ExtArgs> | null
  }


  /**
   * Model Subtopic
   */

  export type AggregateSubtopic = {
    _count: SubtopicCountAggregateOutputType | null
    _avg: SubtopicAvgAggregateOutputType | null
    _sum: SubtopicSumAggregateOutputType | null
    _min: SubtopicMinAggregateOutputType | null
    _max: SubtopicMaxAggregateOutputType | null
  }

  export type SubtopicAvgAggregateOutputType = {
    priority: number | null
    estimatedCards: number | null
  }

  export type SubtopicSumAggregateOutputType = {
    priority: number | null
    estimatedCards: number | null
  }

  export type SubtopicMinAggregateOutputType = {
    id: string | null
    topicId: string | null
    name: string | null
    description: string | null
    priority: number | null
    estimatedCards: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubtopicMaxAggregateOutputType = {
    id: string | null
    topicId: string | null
    name: string | null
    description: string | null
    priority: number | null
    estimatedCards: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubtopicCountAggregateOutputType = {
    id: number
    topicId: number
    name: number
    description: number
    priority: number
    estimatedCards: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubtopicAvgAggregateInputType = {
    priority?: true
    estimatedCards?: true
  }

  export type SubtopicSumAggregateInputType = {
    priority?: true
    estimatedCards?: true
  }

  export type SubtopicMinAggregateInputType = {
    id?: true
    topicId?: true
    name?: true
    description?: true
    priority?: true
    estimatedCards?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubtopicMaxAggregateInputType = {
    id?: true
    topicId?: true
    name?: true
    description?: true
    priority?: true
    estimatedCards?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubtopicCountAggregateInputType = {
    id?: true
    topicId?: true
    name?: true
    description?: true
    priority?: true
    estimatedCards?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubtopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subtopic to aggregate.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subtopics
    **/
    _count?: true | SubtopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubtopicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubtopicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubtopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubtopicMaxAggregateInputType
  }

  export type GetSubtopicAggregateType<T extends SubtopicAggregateArgs> = {
        [P in keyof T & keyof AggregateSubtopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubtopic[P]>
      : GetScalarType<T[P], AggregateSubtopic[P]>
  }




  export type SubtopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubtopicWhereInput
    orderBy?: SubtopicOrderByWithAggregationInput | SubtopicOrderByWithAggregationInput[]
    by: SubtopicScalarFieldEnum[] | SubtopicScalarFieldEnum
    having?: SubtopicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubtopicCountAggregateInputType | true
    _avg?: SubtopicAvgAggregateInputType
    _sum?: SubtopicSumAggregateInputType
    _min?: SubtopicMinAggregateInputType
    _max?: SubtopicMaxAggregateInputType
  }

  export type SubtopicGroupByOutputType = {
    id: string
    topicId: string
    name: string
    description: string | null
    priority: number | null
    estimatedCards: number | null
    createdAt: Date
    updatedAt: Date
    _count: SubtopicCountAggregateOutputType | null
    _avg: SubtopicAvgAggregateOutputType | null
    _sum: SubtopicSumAggregateOutputType | null
    _min: SubtopicMinAggregateOutputType | null
    _max: SubtopicMaxAggregateOutputType | null
  }

  type GetSubtopicGroupByPayload<T extends SubtopicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubtopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubtopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubtopicGroupByOutputType[P]>
            : GetScalarType<T[P], SubtopicGroupByOutputType[P]>
        }
      >
    >


  export type SubtopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    topicId?: boolean
    name?: boolean
    description?: boolean
    priority?: boolean
    estimatedCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    cards?: boolean | Subtopic$cardsArgs<ExtArgs>
    userCards?: boolean | Subtopic$userCardsArgs<ExtArgs>
    studySessions?: boolean | Subtopic$studySessionsArgs<ExtArgs>
    _count?: boolean | SubtopicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtopic"]>

  export type SubtopicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    topicId?: boolean
    name?: boolean
    description?: boolean
    priority?: boolean
    estimatedCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subtopic"]>

  export type SubtopicSelectScalar = {
    id?: boolean
    topicId?: boolean
    name?: boolean
    description?: boolean
    priority?: boolean
    estimatedCards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubtopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    cards?: boolean | Subtopic$cardsArgs<ExtArgs>
    userCards?: boolean | Subtopic$userCardsArgs<ExtArgs>
    studySessions?: boolean | Subtopic$studySessionsArgs<ExtArgs>
    _count?: boolean | SubtopicCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubtopicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    topic?: boolean | TopicDefaultArgs<ExtArgs>
  }

  export type $SubtopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subtopic"
    objects: {
      topic: Prisma.$TopicPayload<ExtArgs>
      cards: Prisma.$CardPayload<ExtArgs>[]
      userCards: Prisma.$UserCardPayload<ExtArgs>[]
      studySessions: Prisma.$StudySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      topicId: string
      name: string
      description: string | null
      priority: number | null
      estimatedCards: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subtopic"]>
    composites: {}
  }

  type SubtopicGetPayload<S extends boolean | null | undefined | SubtopicDefaultArgs> = $Result.GetResult<Prisma.$SubtopicPayload, S>

  type SubtopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubtopicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubtopicCountAggregateInputType | true
    }

  export interface SubtopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subtopic'], meta: { name: 'Subtopic' } }
    /**
     * Find zero or one Subtopic that matches the filter.
     * @param {SubtopicFindUniqueArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubtopicFindUniqueArgs>(args: SelectSubset<T, SubtopicFindUniqueArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subtopic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubtopicFindUniqueOrThrowArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubtopicFindUniqueOrThrowArgs>(args: SelectSubset<T, SubtopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subtopic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicFindFirstArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubtopicFindFirstArgs>(args?: SelectSubset<T, SubtopicFindFirstArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subtopic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicFindFirstOrThrowArgs} args - Arguments to find a Subtopic
     * @example
     * // Get one Subtopic
     * const subtopic = await prisma.subtopic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubtopicFindFirstOrThrowArgs>(args?: SelectSubset<T, SubtopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subtopics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subtopics
     * const subtopics = await prisma.subtopic.findMany()
     * 
     * // Get first 10 Subtopics
     * const subtopics = await prisma.subtopic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subtopicWithIdOnly = await prisma.subtopic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubtopicFindManyArgs>(args?: SelectSubset<T, SubtopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subtopic.
     * @param {SubtopicCreateArgs} args - Arguments to create a Subtopic.
     * @example
     * // Create one Subtopic
     * const Subtopic = await prisma.subtopic.create({
     *   data: {
     *     // ... data to create a Subtopic
     *   }
     * })
     * 
     */
    create<T extends SubtopicCreateArgs>(args: SelectSubset<T, SubtopicCreateArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subtopics.
     * @param {SubtopicCreateManyArgs} args - Arguments to create many Subtopics.
     * @example
     * // Create many Subtopics
     * const subtopic = await prisma.subtopic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubtopicCreateManyArgs>(args?: SelectSubset<T, SubtopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subtopics and returns the data saved in the database.
     * @param {SubtopicCreateManyAndReturnArgs} args - Arguments to create many Subtopics.
     * @example
     * // Create many Subtopics
     * const subtopic = await prisma.subtopic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subtopics and only return the `id`
     * const subtopicWithIdOnly = await prisma.subtopic.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubtopicCreateManyAndReturnArgs>(args?: SelectSubset<T, SubtopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subtopic.
     * @param {SubtopicDeleteArgs} args - Arguments to delete one Subtopic.
     * @example
     * // Delete one Subtopic
     * const Subtopic = await prisma.subtopic.delete({
     *   where: {
     *     // ... filter to delete one Subtopic
     *   }
     * })
     * 
     */
    delete<T extends SubtopicDeleteArgs>(args: SelectSubset<T, SubtopicDeleteArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subtopic.
     * @param {SubtopicUpdateArgs} args - Arguments to update one Subtopic.
     * @example
     * // Update one Subtopic
     * const subtopic = await prisma.subtopic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubtopicUpdateArgs>(args: SelectSubset<T, SubtopicUpdateArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subtopics.
     * @param {SubtopicDeleteManyArgs} args - Arguments to filter Subtopics to delete.
     * @example
     * // Delete a few Subtopics
     * const { count } = await prisma.subtopic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubtopicDeleteManyArgs>(args?: SelectSubset<T, SubtopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subtopics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subtopics
     * const subtopic = await prisma.subtopic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubtopicUpdateManyArgs>(args: SelectSubset<T, SubtopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subtopic.
     * @param {SubtopicUpsertArgs} args - Arguments to update or create a Subtopic.
     * @example
     * // Update or create a Subtopic
     * const subtopic = await prisma.subtopic.upsert({
     *   create: {
     *     // ... data to create a Subtopic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subtopic we want to update
     *   }
     * })
     */
    upsert<T extends SubtopicUpsertArgs>(args: SelectSubset<T, SubtopicUpsertArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subtopics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicCountArgs} args - Arguments to filter Subtopics to count.
     * @example
     * // Count the number of Subtopics
     * const count = await prisma.subtopic.count({
     *   where: {
     *     // ... the filter for the Subtopics we want to count
     *   }
     * })
    **/
    count<T extends SubtopicCountArgs>(
      args?: Subset<T, SubtopicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubtopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subtopic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubtopicAggregateArgs>(args: Subset<T, SubtopicAggregateArgs>): Prisma.PrismaPromise<GetSubtopicAggregateType<T>>

    /**
     * Group by Subtopic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubtopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubtopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubtopicGroupByArgs['orderBy'] }
        : { orderBy?: SubtopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubtopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubtopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subtopic model
   */
  readonly fields: SubtopicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subtopic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubtopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    topic<T extends TopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TopicDefaultArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    cards<T extends Subtopic$cardsArgs<ExtArgs> = {}>(args?: Subset<T, Subtopic$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany"> | Null>
    userCards<T extends Subtopic$userCardsArgs<ExtArgs> = {}>(args?: Subset<T, Subtopic$userCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findMany"> | Null>
    studySessions<T extends Subtopic$studySessionsArgs<ExtArgs> = {}>(args?: Subset<T, Subtopic$studySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subtopic model
   */ 
  interface SubtopicFieldRefs {
    readonly id: FieldRef<"Subtopic", 'String'>
    readonly topicId: FieldRef<"Subtopic", 'String'>
    readonly name: FieldRef<"Subtopic", 'String'>
    readonly description: FieldRef<"Subtopic", 'String'>
    readonly priority: FieldRef<"Subtopic", 'Int'>
    readonly estimatedCards: FieldRef<"Subtopic", 'Int'>
    readonly createdAt: FieldRef<"Subtopic", 'DateTime'>
    readonly updatedAt: FieldRef<"Subtopic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subtopic findUnique
   */
  export type SubtopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic findUniqueOrThrow
   */
  export type SubtopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic findFirst
   */
  export type SubtopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subtopics.
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subtopics.
     */
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Subtopic findFirstOrThrow
   */
  export type SubtopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopic to fetch.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subtopics.
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subtopics.
     */
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Subtopic findMany
   */
  export type SubtopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter, which Subtopics to fetch.
     */
    where?: SubtopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subtopics to fetch.
     */
    orderBy?: SubtopicOrderByWithRelationInput | SubtopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subtopics.
     */
    cursor?: SubtopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subtopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subtopics.
     */
    skip?: number
    distinct?: SubtopicScalarFieldEnum | SubtopicScalarFieldEnum[]
  }

  /**
   * Subtopic create
   */
  export type SubtopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * The data needed to create a Subtopic.
     */
    data: XOR<SubtopicCreateInput, SubtopicUncheckedCreateInput>
  }

  /**
   * Subtopic createMany
   */
  export type SubtopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subtopics.
     */
    data: SubtopicCreateManyInput | SubtopicCreateManyInput[]
  }

  /**
   * Subtopic createManyAndReturn
   */
  export type SubtopicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subtopics.
     */
    data: SubtopicCreateManyInput | SubtopicCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subtopic update
   */
  export type SubtopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * The data needed to update a Subtopic.
     */
    data: XOR<SubtopicUpdateInput, SubtopicUncheckedUpdateInput>
    /**
     * Choose, which Subtopic to update.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic updateMany
   */
  export type SubtopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subtopics.
     */
    data: XOR<SubtopicUpdateManyMutationInput, SubtopicUncheckedUpdateManyInput>
    /**
     * Filter which Subtopics to update
     */
    where?: SubtopicWhereInput
  }

  /**
   * Subtopic upsert
   */
  export type SubtopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * The filter to search for the Subtopic to update in case it exists.
     */
    where: SubtopicWhereUniqueInput
    /**
     * In case the Subtopic found by the `where` argument doesn't exist, create a new Subtopic with this data.
     */
    create: XOR<SubtopicCreateInput, SubtopicUncheckedCreateInput>
    /**
     * In case the Subtopic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubtopicUpdateInput, SubtopicUncheckedUpdateInput>
  }

  /**
   * Subtopic delete
   */
  export type SubtopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    /**
     * Filter which Subtopic to delete.
     */
    where: SubtopicWhereUniqueInput
  }

  /**
   * Subtopic deleteMany
   */
  export type SubtopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subtopics to delete
     */
    where?: SubtopicWhereInput
  }

  /**
   * Subtopic.cards
   */
  export type Subtopic$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Subtopic.userCards
   */
  export type Subtopic$userCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    where?: UserCardWhereInput
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    cursor?: UserCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCardScalarFieldEnum | UserCardScalarFieldEnum[]
  }

  /**
   * Subtopic.studySessions
   */
  export type Subtopic$studySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    cursor?: StudySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * Subtopic without action
   */
  export type SubtopicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
  }


  /**
   * Model Card
   */

  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
  }

  export type CardSumAggregateOutputType = {
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
  }

  export type CardMinAggregateOutputType = {
    id: string | null
    subtopicId: string | null
    front: string | null
    back: string | null
    createdBy: string | null
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CardMaxAggregateOutputType = {
    id: string | null
    subtopicId: string | null
    front: string | null
    back: string | null
    createdBy: string | null
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    subtopicId: number
    front: number
    back: number
    createdBy: number
    repetitions: number
    easeFactor: number
    interval: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    repetitions?: true
    easeFactor?: true
    interval?: true
  }

  export type CardSumAggregateInputType = {
    repetitions?: true
    easeFactor?: true
    interval?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    subtopicId?: true
    front?: true
    back?: true
    createdBy?: true
    repetitions?: true
    easeFactor?: true
    interval?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    subtopicId?: true
    front?: true
    back?: true
    createdBy?: true
    repetitions?: true
    easeFactor?: true
    interval?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    subtopicId?: true
    front?: true
    back?: true
    createdBy?: true
    repetitions?: true
    easeFactor?: true
    interval?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Card to aggregate.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
    orderBy?: CardOrderByWithAggregationInput | CardOrderByWithAggregationInput[]
    by: CardScalarFieldEnum[] | CardScalarFieldEnum
    having?: CardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }

  export type CardGroupByOutputType = {
    id: string
    subtopicId: string
    front: string
    back: string
    createdBy: string
    repetitions: number
    easeFactor: number
    interval: number
    createdAt: Date
    updatedAt: Date
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type CardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subtopicId?: boolean
    front?: boolean
    back?: boolean
    createdBy?: boolean
    repetitions?: boolean
    easeFactor?: boolean
    interval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subtopic?: boolean | SubtopicDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    userCards?: boolean | Card$userCardsArgs<ExtArgs>
    studySessions?: boolean | Card$studySessionsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type CardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subtopicId?: boolean
    front?: boolean
    back?: boolean
    createdBy?: boolean
    repetitions?: boolean
    easeFactor?: boolean
    interval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subtopic?: boolean | SubtopicDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type CardSelectScalar = {
    id?: boolean
    subtopicId?: boolean
    front?: boolean
    back?: boolean
    createdBy?: boolean
    repetitions?: boolean
    easeFactor?: boolean
    interval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtopic?: boolean | SubtopicDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    userCards?: boolean | Card$userCardsArgs<ExtArgs>
    studySessions?: boolean | Card$studySessionsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subtopic?: boolean | SubtopicDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Card"
    objects: {
      subtopic: Prisma.$SubtopicPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      userCards: Prisma.$UserCardPayload<ExtArgs>[]
      studySessions: Prisma.$StudySessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subtopicId: string
      front: string
      back: string
      createdBy: string
      repetitions: number
      easeFactor: number
      interval: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["card"]>
    composites: {}
  }

  type CardGetPayload<S extends boolean | null | undefined | CardDefaultArgs> = $Result.GetResult<Prisma.$CardPayload, S>

  type CardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface CardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Card'], meta: { name: 'Card' } }
    /**
     * Find zero or one Card that matches the filter.
     * @param {CardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardFindUniqueArgs>(args: SelectSubset<T, CardFindUniqueArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Card that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardFindUniqueOrThrowArgs>(args: SelectSubset<T, CardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardFindFirstArgs>(args?: SelectSubset<T, CardFindFirstArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Card that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardFindFirstOrThrowArgs>(args?: SelectSubset<T, CardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardFindManyArgs>(args?: SelectSubset<T, CardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Card.
     * @param {CardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
     */
    create<T extends CardCreateArgs>(args: SelectSubset<T, CardCreateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cards.
     * @param {CardCreateManyArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const card = await prisma.card.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardCreateManyArgs>(args?: SelectSubset<T, CardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cards and returns the data saved in the database.
     * @param {CardCreateManyAndReturnArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const card = await prisma.card.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cards and only return the `id`
     * const cardWithIdOnly = await prisma.card.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardCreateManyAndReturnArgs>(args?: SelectSubset<T, CardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Card.
     * @param {CardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
     */
    delete<T extends CardDeleteArgs>(args: SelectSubset<T, CardDeleteArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Card.
     * @param {CardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardUpdateArgs>(args: SelectSubset<T, CardUpdateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cards.
     * @param {CardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardDeleteManyArgs>(args?: SelectSubset<T, CardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardUpdateManyArgs>(args: SelectSubset<T, CardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Card.
     * @param {CardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
     */
    upsert<T extends CardUpsertArgs>(args: SelectSubset<T, CardUpsertArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardCountArgs>(
      args?: Subset<T, CardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Card model
   */
  readonly fields: CardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subtopic<T extends SubtopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubtopicDefaultArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    userCards<T extends Card$userCardsArgs<ExtArgs> = {}>(args?: Subset<T, Card$userCardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findMany"> | Null>
    studySessions<T extends Card$studySessionsArgs<ExtArgs> = {}>(args?: Subset<T, Card$studySessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Card model
   */ 
  interface CardFieldRefs {
    readonly id: FieldRef<"Card", 'String'>
    readonly subtopicId: FieldRef<"Card", 'String'>
    readonly front: FieldRef<"Card", 'String'>
    readonly back: FieldRef<"Card", 'String'>
    readonly createdBy: FieldRef<"Card", 'String'>
    readonly repetitions: FieldRef<"Card", 'Int'>
    readonly easeFactor: FieldRef<"Card", 'Float'>
    readonly interval: FieldRef<"Card", 'Int'>
    readonly createdAt: FieldRef<"Card", 'DateTime'>
    readonly updatedAt: FieldRef<"Card", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Card findUnique
   */
  export type CardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findUniqueOrThrow
   */
  export type CardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findFirst
   */
  export type CardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findFirstOrThrow
   */
  export type CardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findMany
   */
  export type CardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card create
   */
  export type CardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to create a Card.
     */
    data: XOR<CardCreateInput, CardUncheckedCreateInput>
  }

  /**
   * Card createMany
   */
  export type CardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cards.
     */
    data: CardCreateManyInput | CardCreateManyInput[]
  }

  /**
   * Card createManyAndReturn
   */
  export type CardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cards.
     */
    data: CardCreateManyInput | CardCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Card update
   */
  export type CardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to update a Card.
     */
    data: XOR<CardUpdateInput, CardUncheckedUpdateInput>
    /**
     * Choose, which Card to update.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card updateMany
   */
  export type CardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
  }

  /**
   * Card upsert
   */
  export type CardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The filter to search for the Card to update in case it exists.
     */
    where: CardWhereUniqueInput
    /**
     * In case the Card found by the `where` argument doesn't exist, create a new Card with this data.
     */
    create: XOR<CardCreateInput, CardUncheckedCreateInput>
    /**
     * In case the Card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardUpdateInput, CardUncheckedUpdateInput>
  }

  /**
   * Card delete
   */
  export type CardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter which Card to delete.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card deleteMany
   */
  export type CardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cards to delete
     */
    where?: CardWhereInput
  }

  /**
   * Card.userCards
   */
  export type Card$userCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    where?: UserCardWhereInput
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    cursor?: UserCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCardScalarFieldEnum | UserCardScalarFieldEnum[]
  }

  /**
   * Card.studySessions
   */
  export type Card$studySessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    cursor?: StudySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * Card without action
   */
  export type CardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
  }


  /**
   * Model UserCard
   */

  export type AggregateUserCard = {
    _count: UserCardCountAggregateOutputType | null
    _avg: UserCardAvgAggregateOutputType | null
    _sum: UserCardSumAggregateOutputType | null
    _min: UserCardMinAggregateOutputType | null
    _max: UserCardMaxAggregateOutputType | null
  }

  export type UserCardAvgAggregateOutputType = {
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
    totalCorrectReviews: number | null
    totalIncorrectReviews: number | null
    correctStreak: number | null
    incorrectStreak: number | null
  }

  export type UserCardSumAggregateOutputType = {
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
    totalCorrectReviews: number | null
    totalIncorrectReviews: number | null
    correctStreak: number | null
    incorrectStreak: number | null
  }

  export type UserCardMinAggregateOutputType = {
    id: string | null
    userId: string | null
    cardId: string | null
    contestId: string | null
    subtopicId: string | null
    nextReviewTime: Date | null
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
    lastReviewed: Date | null
    totalCorrectReviews: number | null
    totalIncorrectReviews: number | null
    nextReview: Date | null
    correctStreak: number | null
    incorrectStreak: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCardMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    cardId: string | null
    contestId: string | null
    subtopicId: string | null
    nextReviewTime: Date | null
    repetitions: number | null
    easeFactor: number | null
    interval: number | null
    lastReviewed: Date | null
    totalCorrectReviews: number | null
    totalIncorrectReviews: number | null
    nextReview: Date | null
    correctStreak: number | null
    incorrectStreak: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCardCountAggregateOutputType = {
    id: number
    userId: number
    cardId: number
    contestId: number
    subtopicId: number
    nextReviewTime: number
    repetitions: number
    easeFactor: number
    interval: number
    lastReviewed: number
    totalCorrectReviews: number
    totalIncorrectReviews: number
    nextReview: number
    correctStreak: number
    incorrectStreak: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserCardAvgAggregateInputType = {
    repetitions?: true
    easeFactor?: true
    interval?: true
    totalCorrectReviews?: true
    totalIncorrectReviews?: true
    correctStreak?: true
    incorrectStreak?: true
  }

  export type UserCardSumAggregateInputType = {
    repetitions?: true
    easeFactor?: true
    interval?: true
    totalCorrectReviews?: true
    totalIncorrectReviews?: true
    correctStreak?: true
    incorrectStreak?: true
  }

  export type UserCardMinAggregateInputType = {
    id?: true
    userId?: true
    cardId?: true
    contestId?: true
    subtopicId?: true
    nextReviewTime?: true
    repetitions?: true
    easeFactor?: true
    interval?: true
    lastReviewed?: true
    totalCorrectReviews?: true
    totalIncorrectReviews?: true
    nextReview?: true
    correctStreak?: true
    incorrectStreak?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCardMaxAggregateInputType = {
    id?: true
    userId?: true
    cardId?: true
    contestId?: true
    subtopicId?: true
    nextReviewTime?: true
    repetitions?: true
    easeFactor?: true
    interval?: true
    lastReviewed?: true
    totalCorrectReviews?: true
    totalIncorrectReviews?: true
    nextReview?: true
    correctStreak?: true
    incorrectStreak?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCardCountAggregateInputType = {
    id?: true
    userId?: true
    cardId?: true
    contestId?: true
    subtopicId?: true
    nextReviewTime?: true
    repetitions?: true
    easeFactor?: true
    interval?: true
    lastReviewed?: true
    totalCorrectReviews?: true
    totalIncorrectReviews?: true
    nextReview?: true
    correctStreak?: true
    incorrectStreak?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCard to aggregate.
     */
    where?: UserCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCards to fetch.
     */
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCards
    **/
    _count?: true | UserCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserCardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserCardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCardMaxAggregateInputType
  }

  export type GetUserCardAggregateType<T extends UserCardAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCard[P]>
      : GetScalarType<T[P], AggregateUserCard[P]>
  }




  export type UserCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCardWhereInput
    orderBy?: UserCardOrderByWithAggregationInput | UserCardOrderByWithAggregationInput[]
    by: UserCardScalarFieldEnum[] | UserCardScalarFieldEnum
    having?: UserCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCardCountAggregateInputType | true
    _avg?: UserCardAvgAggregateInputType
    _sum?: UserCardSumAggregateInputType
    _min?: UserCardMinAggregateInputType
    _max?: UserCardMaxAggregateInputType
  }

  export type UserCardGroupByOutputType = {
    id: string
    userId: string
    cardId: string
    contestId: string
    subtopicId: string | null
    nextReviewTime: Date | null
    repetitions: number
    easeFactor: number
    interval: number
    lastReviewed: Date | null
    totalCorrectReviews: number
    totalIncorrectReviews: number
    nextReview: Date | null
    correctStreak: number
    incorrectStreak: number
    status: string
    createdAt: Date
    updatedAt: Date
    _count: UserCardCountAggregateOutputType | null
    _avg: UserCardAvgAggregateOutputType | null
    _sum: UserCardSumAggregateOutputType | null
    _min: UserCardMinAggregateOutputType | null
    _max: UserCardMaxAggregateOutputType | null
  }

  type GetUserCardGroupByPayload<T extends UserCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCardGroupByOutputType[P]>
            : GetScalarType<T[P], UserCardGroupByOutputType[P]>
        }
      >
    >


  export type UserCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cardId?: boolean
    contestId?: boolean
    subtopicId?: boolean
    nextReviewTime?: boolean
    repetitions?: boolean
    easeFactor?: boolean
    interval?: boolean
    lastReviewed?: boolean
    totalCorrectReviews?: boolean
    totalIncorrectReviews?: boolean
    nextReview?: boolean
    correctStreak?: boolean
    incorrectStreak?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | UserCard$subtopicArgs<ExtArgs>
  }, ExtArgs["result"]["userCard"]>

  export type UserCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cardId?: boolean
    contestId?: boolean
    subtopicId?: boolean
    nextReviewTime?: boolean
    repetitions?: boolean
    easeFactor?: boolean
    interval?: boolean
    lastReviewed?: boolean
    totalCorrectReviews?: boolean
    totalIncorrectReviews?: boolean
    nextReview?: boolean
    correctStreak?: boolean
    incorrectStreak?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | UserCard$subtopicArgs<ExtArgs>
  }, ExtArgs["result"]["userCard"]>

  export type UserCardSelectScalar = {
    id?: boolean
    userId?: boolean
    cardId?: boolean
    contestId?: boolean
    subtopicId?: boolean
    nextReviewTime?: boolean
    repetitions?: boolean
    easeFactor?: boolean
    interval?: boolean
    lastReviewed?: boolean
    totalCorrectReviews?: boolean
    totalIncorrectReviews?: boolean
    nextReview?: boolean
    correctStreak?: boolean
    incorrectStreak?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | UserCard$subtopicArgs<ExtArgs>
  }
  export type UserCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | UserCard$subtopicArgs<ExtArgs>
  }

  export type $UserCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCard"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      card: Prisma.$CardPayload<ExtArgs>
      contest: Prisma.$ContestPayload<ExtArgs>
      subtopic: Prisma.$SubtopicPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      cardId: string
      contestId: string
      subtopicId: string | null
      nextReviewTime: Date | null
      repetitions: number
      easeFactor: number
      interval: number
      lastReviewed: Date | null
      totalCorrectReviews: number
      totalIncorrectReviews: number
      nextReview: Date | null
      correctStreak: number
      incorrectStreak: number
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userCard"]>
    composites: {}
  }

  type UserCardGetPayload<S extends boolean | null | undefined | UserCardDefaultArgs> = $Result.GetResult<Prisma.$UserCardPayload, S>

  type UserCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserCardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCardCountAggregateInputType | true
    }

  export interface UserCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCard'], meta: { name: 'UserCard' } }
    /**
     * Find zero or one UserCard that matches the filter.
     * @param {UserCardFindUniqueArgs} args - Arguments to find a UserCard
     * @example
     * // Get one UserCard
     * const userCard = await prisma.userCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserCardFindUniqueArgs>(args: SelectSubset<T, UserCardFindUniqueArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserCard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserCardFindUniqueOrThrowArgs} args - Arguments to find a UserCard
     * @example
     * // Get one UserCard
     * const userCard = await prisma.userCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserCardFindUniqueOrThrowArgs>(args: SelectSubset<T, UserCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardFindFirstArgs} args - Arguments to find a UserCard
     * @example
     * // Get one UserCard
     * const userCard = await prisma.userCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserCardFindFirstArgs>(args?: SelectSubset<T, UserCardFindFirstArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardFindFirstOrThrowArgs} args - Arguments to find a UserCard
     * @example
     * // Get one UserCard
     * const userCard = await prisma.userCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserCardFindFirstOrThrowArgs>(args?: SelectSubset<T, UserCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCards
     * const userCards = await prisma.userCard.findMany()
     * 
     * // Get first 10 UserCards
     * const userCards = await prisma.userCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userCardWithIdOnly = await prisma.userCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserCardFindManyArgs>(args?: SelectSubset<T, UserCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserCard.
     * @param {UserCardCreateArgs} args - Arguments to create a UserCard.
     * @example
     * // Create one UserCard
     * const UserCard = await prisma.userCard.create({
     *   data: {
     *     // ... data to create a UserCard
     *   }
     * })
     * 
     */
    create<T extends UserCardCreateArgs>(args: SelectSubset<T, UserCardCreateArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserCards.
     * @param {UserCardCreateManyArgs} args - Arguments to create many UserCards.
     * @example
     * // Create many UserCards
     * const userCard = await prisma.userCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCardCreateManyArgs>(args?: SelectSubset<T, UserCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserCards and returns the data saved in the database.
     * @param {UserCardCreateManyAndReturnArgs} args - Arguments to create many UserCards.
     * @example
     * // Create many UserCards
     * const userCard = await prisma.userCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserCards and only return the `id`
     * const userCardWithIdOnly = await prisma.userCard.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCardCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserCard.
     * @param {UserCardDeleteArgs} args - Arguments to delete one UserCard.
     * @example
     * // Delete one UserCard
     * const UserCard = await prisma.userCard.delete({
     *   where: {
     *     // ... filter to delete one UserCard
     *   }
     * })
     * 
     */
    delete<T extends UserCardDeleteArgs>(args: SelectSubset<T, UserCardDeleteArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserCard.
     * @param {UserCardUpdateArgs} args - Arguments to update one UserCard.
     * @example
     * // Update one UserCard
     * const userCard = await prisma.userCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserCardUpdateArgs>(args: SelectSubset<T, UserCardUpdateArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserCards.
     * @param {UserCardDeleteManyArgs} args - Arguments to filter UserCards to delete.
     * @example
     * // Delete a few UserCards
     * const { count } = await prisma.userCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserCardDeleteManyArgs>(args?: SelectSubset<T, UserCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCards
     * const userCard = await prisma.userCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserCardUpdateManyArgs>(args: SelectSubset<T, UserCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCard.
     * @param {UserCardUpsertArgs} args - Arguments to update or create a UserCard.
     * @example
     * // Update or create a UserCard
     * const userCard = await prisma.userCard.upsert({
     *   create: {
     *     // ... data to create a UserCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCard we want to update
     *   }
     * })
     */
    upsert<T extends UserCardUpsertArgs>(args: SelectSubset<T, UserCardUpsertArgs<ExtArgs>>): Prisma__UserCardClient<$Result.GetResult<Prisma.$UserCardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardCountArgs} args - Arguments to filter UserCards to count.
     * @example
     * // Count the number of UserCards
     * const count = await prisma.userCard.count({
     *   where: {
     *     // ... the filter for the UserCards we want to count
     *   }
     * })
    **/
    count<T extends UserCardCountArgs>(
      args?: Subset<T, UserCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCardAggregateArgs>(args: Subset<T, UserCardAggregateArgs>): Prisma.PrismaPromise<GetUserCardAggregateType<T>>

    /**
     * Group by UserCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCardGroupByArgs['orderBy'] }
        : { orderBy?: UserCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCard model
   */
  readonly fields: UserCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contest<T extends ContestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContestDefaultArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subtopic<T extends UserCard$subtopicArgs<ExtArgs> = {}>(args?: Subset<T, UserCard$subtopicArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserCard model
   */ 
  interface UserCardFieldRefs {
    readonly id: FieldRef<"UserCard", 'String'>
    readonly userId: FieldRef<"UserCard", 'String'>
    readonly cardId: FieldRef<"UserCard", 'String'>
    readonly contestId: FieldRef<"UserCard", 'String'>
    readonly subtopicId: FieldRef<"UserCard", 'String'>
    readonly nextReviewTime: FieldRef<"UserCard", 'DateTime'>
    readonly repetitions: FieldRef<"UserCard", 'Int'>
    readonly easeFactor: FieldRef<"UserCard", 'Float'>
    readonly interval: FieldRef<"UserCard", 'Int'>
    readonly lastReviewed: FieldRef<"UserCard", 'DateTime'>
    readonly totalCorrectReviews: FieldRef<"UserCard", 'Int'>
    readonly totalIncorrectReviews: FieldRef<"UserCard", 'Int'>
    readonly nextReview: FieldRef<"UserCard", 'DateTime'>
    readonly correctStreak: FieldRef<"UserCard", 'Int'>
    readonly incorrectStreak: FieldRef<"UserCard", 'Int'>
    readonly status: FieldRef<"UserCard", 'String'>
    readonly createdAt: FieldRef<"UserCard", 'DateTime'>
    readonly updatedAt: FieldRef<"UserCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserCard findUnique
   */
  export type UserCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * Filter, which UserCard to fetch.
     */
    where: UserCardWhereUniqueInput
  }

  /**
   * UserCard findUniqueOrThrow
   */
  export type UserCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * Filter, which UserCard to fetch.
     */
    where: UserCardWhereUniqueInput
  }

  /**
   * UserCard findFirst
   */
  export type UserCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * Filter, which UserCard to fetch.
     */
    where?: UserCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCards to fetch.
     */
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCards.
     */
    cursor?: UserCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCards.
     */
    distinct?: UserCardScalarFieldEnum | UserCardScalarFieldEnum[]
  }

  /**
   * UserCard findFirstOrThrow
   */
  export type UserCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * Filter, which UserCard to fetch.
     */
    where?: UserCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCards to fetch.
     */
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCards.
     */
    cursor?: UserCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCards.
     */
    distinct?: UserCardScalarFieldEnum | UserCardScalarFieldEnum[]
  }

  /**
   * UserCard findMany
   */
  export type UserCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * Filter, which UserCards to fetch.
     */
    where?: UserCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCards to fetch.
     */
    orderBy?: UserCardOrderByWithRelationInput | UserCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCards.
     */
    cursor?: UserCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCards.
     */
    skip?: number
    distinct?: UserCardScalarFieldEnum | UserCardScalarFieldEnum[]
  }

  /**
   * UserCard create
   */
  export type UserCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCard.
     */
    data: XOR<UserCardCreateInput, UserCardUncheckedCreateInput>
  }

  /**
   * UserCard createMany
   */
  export type UserCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCards.
     */
    data: UserCardCreateManyInput | UserCardCreateManyInput[]
  }

  /**
   * UserCard createManyAndReturn
   */
  export type UserCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserCards.
     */
    data: UserCardCreateManyInput | UserCardCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserCard update
   */
  export type UserCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCard.
     */
    data: XOR<UserCardUpdateInput, UserCardUncheckedUpdateInput>
    /**
     * Choose, which UserCard to update.
     */
    where: UserCardWhereUniqueInput
  }

  /**
   * UserCard updateMany
   */
  export type UserCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCards.
     */
    data: XOR<UserCardUpdateManyMutationInput, UserCardUncheckedUpdateManyInput>
    /**
     * Filter which UserCards to update
     */
    where?: UserCardWhereInput
  }

  /**
   * UserCard upsert
   */
  export type UserCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCard to update in case it exists.
     */
    where: UserCardWhereUniqueInput
    /**
     * In case the UserCard found by the `where` argument doesn't exist, create a new UserCard with this data.
     */
    create: XOR<UserCardCreateInput, UserCardUncheckedCreateInput>
    /**
     * In case the UserCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCardUpdateInput, UserCardUncheckedUpdateInput>
  }

  /**
   * UserCard delete
   */
  export type UserCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
    /**
     * Filter which UserCard to delete.
     */
    where: UserCardWhereUniqueInput
  }

  /**
   * UserCard deleteMany
   */
  export type UserCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCards to delete
     */
    where?: UserCardWhereInput
  }

  /**
   * UserCard.subtopic
   */
  export type UserCard$subtopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    where?: SubtopicWhereInput
  }

  /**
   * UserCard without action
   */
  export type UserCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCard
     */
    select?: UserCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCardInclude<ExtArgs> | null
  }


  /**
   * Model ContestTopic
   */

  export type AggregateContestTopic = {
    _count: ContestTopicCountAggregateOutputType | null
    _avg: ContestTopicAvgAggregateOutputType | null
    _sum: ContestTopicSumAggregateOutputType | null
    _min: ContestTopicMinAggregateOutputType | null
    _max: ContestTopicMaxAggregateOutputType | null
  }

  export type ContestTopicAvgAggregateOutputType = {
    priority: number | null
  }

  export type ContestTopicSumAggregateOutputType = {
    priority: number | null
  }

  export type ContestTopicMinAggregateOutputType = {
    id: string | null
    contestId: string | null
    topicId: string | null
    userId: string | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContestTopicMaxAggregateOutputType = {
    id: string | null
    contestId: string | null
    topicId: string | null
    userId: string | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContestTopicCountAggregateOutputType = {
    id: number
    contestId: number
    topicId: number
    userId: number
    priority: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContestTopicAvgAggregateInputType = {
    priority?: true
  }

  export type ContestTopicSumAggregateInputType = {
    priority?: true
  }

  export type ContestTopicMinAggregateInputType = {
    id?: true
    contestId?: true
    topicId?: true
    userId?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContestTopicMaxAggregateInputType = {
    id?: true
    contestId?: true
    topicId?: true
    userId?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContestTopicCountAggregateInputType = {
    id?: true
    contestId?: true
    topicId?: true
    userId?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContestTopicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContestTopic to aggregate.
     */
    where?: ContestTopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContestTopics to fetch.
     */
    orderBy?: ContestTopicOrderByWithRelationInput | ContestTopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContestTopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContestTopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContestTopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContestTopics
    **/
    _count?: true | ContestTopicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContestTopicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContestTopicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContestTopicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContestTopicMaxAggregateInputType
  }

  export type GetContestTopicAggregateType<T extends ContestTopicAggregateArgs> = {
        [P in keyof T & keyof AggregateContestTopic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContestTopic[P]>
      : GetScalarType<T[P], AggregateContestTopic[P]>
  }




  export type ContestTopicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContestTopicWhereInput
    orderBy?: ContestTopicOrderByWithAggregationInput | ContestTopicOrderByWithAggregationInput[]
    by: ContestTopicScalarFieldEnum[] | ContestTopicScalarFieldEnum
    having?: ContestTopicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContestTopicCountAggregateInputType | true
    _avg?: ContestTopicAvgAggregateInputType
    _sum?: ContestTopicSumAggregateInputType
    _min?: ContestTopicMinAggregateInputType
    _max?: ContestTopicMaxAggregateInputType
  }

  export type ContestTopicGroupByOutputType = {
    id: string
    contestId: string
    topicId: string
    userId: string
    priority: number | null
    createdAt: Date
    updatedAt: Date
    _count: ContestTopicCountAggregateOutputType | null
    _avg: ContestTopicAvgAggregateOutputType | null
    _sum: ContestTopicSumAggregateOutputType | null
    _min: ContestTopicMinAggregateOutputType | null
    _max: ContestTopicMaxAggregateOutputType | null
  }

  type GetContestTopicGroupByPayload<T extends ContestTopicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContestTopicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContestTopicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContestTopicGroupByOutputType[P]>
            : GetScalarType<T[P], ContestTopicGroupByOutputType[P]>
        }
      >
    >


  export type ContestTopicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contestId?: boolean
    topicId?: boolean
    userId?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contestTopic"]>

  export type ContestTopicSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contestId?: boolean
    topicId?: boolean
    userId?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contestTopic"]>

  export type ContestTopicSelectScalar = {
    id?: boolean
    contestId?: boolean
    topicId?: boolean
    userId?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContestTopicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ContestTopicIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    topic?: boolean | TopicDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ContestTopicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContestTopic"
    objects: {
      contest: Prisma.$ContestPayload<ExtArgs>
      topic: Prisma.$TopicPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contestId: string
      topicId: string
      userId: string
      priority: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contestTopic"]>
    composites: {}
  }

  type ContestTopicGetPayload<S extends boolean | null | undefined | ContestTopicDefaultArgs> = $Result.GetResult<Prisma.$ContestTopicPayload, S>

  type ContestTopicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContestTopicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContestTopicCountAggregateInputType | true
    }

  export interface ContestTopicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContestTopic'], meta: { name: 'ContestTopic' } }
    /**
     * Find zero or one ContestTopic that matches the filter.
     * @param {ContestTopicFindUniqueArgs} args - Arguments to find a ContestTopic
     * @example
     * // Get one ContestTopic
     * const contestTopic = await prisma.contestTopic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContestTopicFindUniqueArgs>(args: SelectSubset<T, ContestTopicFindUniqueArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContestTopic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContestTopicFindUniqueOrThrowArgs} args - Arguments to find a ContestTopic
     * @example
     * // Get one ContestTopic
     * const contestTopic = await prisma.contestTopic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContestTopicFindUniqueOrThrowArgs>(args: SelectSubset<T, ContestTopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContestTopic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestTopicFindFirstArgs} args - Arguments to find a ContestTopic
     * @example
     * // Get one ContestTopic
     * const contestTopic = await prisma.contestTopic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContestTopicFindFirstArgs>(args?: SelectSubset<T, ContestTopicFindFirstArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContestTopic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestTopicFindFirstOrThrowArgs} args - Arguments to find a ContestTopic
     * @example
     * // Get one ContestTopic
     * const contestTopic = await prisma.contestTopic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContestTopicFindFirstOrThrowArgs>(args?: SelectSubset<T, ContestTopicFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContestTopics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestTopicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContestTopics
     * const contestTopics = await prisma.contestTopic.findMany()
     * 
     * // Get first 10 ContestTopics
     * const contestTopics = await prisma.contestTopic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contestTopicWithIdOnly = await prisma.contestTopic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContestTopicFindManyArgs>(args?: SelectSubset<T, ContestTopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContestTopic.
     * @param {ContestTopicCreateArgs} args - Arguments to create a ContestTopic.
     * @example
     * // Create one ContestTopic
     * const ContestTopic = await prisma.contestTopic.create({
     *   data: {
     *     // ... data to create a ContestTopic
     *   }
     * })
     * 
     */
    create<T extends ContestTopicCreateArgs>(args: SelectSubset<T, ContestTopicCreateArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContestTopics.
     * @param {ContestTopicCreateManyArgs} args - Arguments to create many ContestTopics.
     * @example
     * // Create many ContestTopics
     * const contestTopic = await prisma.contestTopic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContestTopicCreateManyArgs>(args?: SelectSubset<T, ContestTopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContestTopics and returns the data saved in the database.
     * @param {ContestTopicCreateManyAndReturnArgs} args - Arguments to create many ContestTopics.
     * @example
     * // Create many ContestTopics
     * const contestTopic = await prisma.contestTopic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContestTopics and only return the `id`
     * const contestTopicWithIdOnly = await prisma.contestTopic.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContestTopicCreateManyAndReturnArgs>(args?: SelectSubset<T, ContestTopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContestTopic.
     * @param {ContestTopicDeleteArgs} args - Arguments to delete one ContestTopic.
     * @example
     * // Delete one ContestTopic
     * const ContestTopic = await prisma.contestTopic.delete({
     *   where: {
     *     // ... filter to delete one ContestTopic
     *   }
     * })
     * 
     */
    delete<T extends ContestTopicDeleteArgs>(args: SelectSubset<T, ContestTopicDeleteArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContestTopic.
     * @param {ContestTopicUpdateArgs} args - Arguments to update one ContestTopic.
     * @example
     * // Update one ContestTopic
     * const contestTopic = await prisma.contestTopic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContestTopicUpdateArgs>(args: SelectSubset<T, ContestTopicUpdateArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContestTopics.
     * @param {ContestTopicDeleteManyArgs} args - Arguments to filter ContestTopics to delete.
     * @example
     * // Delete a few ContestTopics
     * const { count } = await prisma.contestTopic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContestTopicDeleteManyArgs>(args?: SelectSubset<T, ContestTopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContestTopics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestTopicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContestTopics
     * const contestTopic = await prisma.contestTopic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContestTopicUpdateManyArgs>(args: SelectSubset<T, ContestTopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContestTopic.
     * @param {ContestTopicUpsertArgs} args - Arguments to update or create a ContestTopic.
     * @example
     * // Update or create a ContestTopic
     * const contestTopic = await prisma.contestTopic.upsert({
     *   create: {
     *     // ... data to create a ContestTopic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContestTopic we want to update
     *   }
     * })
     */
    upsert<T extends ContestTopicUpsertArgs>(args: SelectSubset<T, ContestTopicUpsertArgs<ExtArgs>>): Prisma__ContestTopicClient<$Result.GetResult<Prisma.$ContestTopicPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContestTopics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestTopicCountArgs} args - Arguments to filter ContestTopics to count.
     * @example
     * // Count the number of ContestTopics
     * const count = await prisma.contestTopic.count({
     *   where: {
     *     // ... the filter for the ContestTopics we want to count
     *   }
     * })
    **/
    count<T extends ContestTopicCountArgs>(
      args?: Subset<T, ContestTopicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContestTopicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContestTopic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestTopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContestTopicAggregateArgs>(args: Subset<T, ContestTopicAggregateArgs>): Prisma.PrismaPromise<GetContestTopicAggregateType<T>>

    /**
     * Group by ContestTopic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContestTopicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContestTopicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContestTopicGroupByArgs['orderBy'] }
        : { orderBy?: ContestTopicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContestTopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContestTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContestTopic model
   */
  readonly fields: ContestTopicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContestTopic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContestTopicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contest<T extends ContestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContestDefaultArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    topic<T extends TopicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TopicDefaultArgs<ExtArgs>>): Prisma__TopicClient<$Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContestTopic model
   */ 
  interface ContestTopicFieldRefs {
    readonly id: FieldRef<"ContestTopic", 'String'>
    readonly contestId: FieldRef<"ContestTopic", 'String'>
    readonly topicId: FieldRef<"ContestTopic", 'String'>
    readonly userId: FieldRef<"ContestTopic", 'String'>
    readonly priority: FieldRef<"ContestTopic", 'Int'>
    readonly createdAt: FieldRef<"ContestTopic", 'DateTime'>
    readonly updatedAt: FieldRef<"ContestTopic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContestTopic findUnique
   */
  export type ContestTopicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * Filter, which ContestTopic to fetch.
     */
    where: ContestTopicWhereUniqueInput
  }

  /**
   * ContestTopic findUniqueOrThrow
   */
  export type ContestTopicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * Filter, which ContestTopic to fetch.
     */
    where: ContestTopicWhereUniqueInput
  }

  /**
   * ContestTopic findFirst
   */
  export type ContestTopicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * Filter, which ContestTopic to fetch.
     */
    where?: ContestTopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContestTopics to fetch.
     */
    orderBy?: ContestTopicOrderByWithRelationInput | ContestTopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContestTopics.
     */
    cursor?: ContestTopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContestTopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContestTopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContestTopics.
     */
    distinct?: ContestTopicScalarFieldEnum | ContestTopicScalarFieldEnum[]
  }

  /**
   * ContestTopic findFirstOrThrow
   */
  export type ContestTopicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * Filter, which ContestTopic to fetch.
     */
    where?: ContestTopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContestTopics to fetch.
     */
    orderBy?: ContestTopicOrderByWithRelationInput | ContestTopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContestTopics.
     */
    cursor?: ContestTopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContestTopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContestTopics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContestTopics.
     */
    distinct?: ContestTopicScalarFieldEnum | ContestTopicScalarFieldEnum[]
  }

  /**
   * ContestTopic findMany
   */
  export type ContestTopicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * Filter, which ContestTopics to fetch.
     */
    where?: ContestTopicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContestTopics to fetch.
     */
    orderBy?: ContestTopicOrderByWithRelationInput | ContestTopicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContestTopics.
     */
    cursor?: ContestTopicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContestTopics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContestTopics.
     */
    skip?: number
    distinct?: ContestTopicScalarFieldEnum | ContestTopicScalarFieldEnum[]
  }

  /**
   * ContestTopic create
   */
  export type ContestTopicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * The data needed to create a ContestTopic.
     */
    data: XOR<ContestTopicCreateInput, ContestTopicUncheckedCreateInput>
  }

  /**
   * ContestTopic createMany
   */
  export type ContestTopicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContestTopics.
     */
    data: ContestTopicCreateManyInput | ContestTopicCreateManyInput[]
  }

  /**
   * ContestTopic createManyAndReturn
   */
  export type ContestTopicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContestTopics.
     */
    data: ContestTopicCreateManyInput | ContestTopicCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContestTopic update
   */
  export type ContestTopicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * The data needed to update a ContestTopic.
     */
    data: XOR<ContestTopicUpdateInput, ContestTopicUncheckedUpdateInput>
    /**
     * Choose, which ContestTopic to update.
     */
    where: ContestTopicWhereUniqueInput
  }

  /**
   * ContestTopic updateMany
   */
  export type ContestTopicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContestTopics.
     */
    data: XOR<ContestTopicUpdateManyMutationInput, ContestTopicUncheckedUpdateManyInput>
    /**
     * Filter which ContestTopics to update
     */
    where?: ContestTopicWhereInput
  }

  /**
   * ContestTopic upsert
   */
  export type ContestTopicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * The filter to search for the ContestTopic to update in case it exists.
     */
    where: ContestTopicWhereUniqueInput
    /**
     * In case the ContestTopic found by the `where` argument doesn't exist, create a new ContestTopic with this data.
     */
    create: XOR<ContestTopicCreateInput, ContestTopicUncheckedCreateInput>
    /**
     * In case the ContestTopic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContestTopicUpdateInput, ContestTopicUncheckedUpdateInput>
  }

  /**
   * ContestTopic delete
   */
  export type ContestTopicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
    /**
     * Filter which ContestTopic to delete.
     */
    where: ContestTopicWhereUniqueInput
  }

  /**
   * ContestTopic deleteMany
   */
  export type ContestTopicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContestTopics to delete
     */
    where?: ContestTopicWhereInput
  }

  /**
   * ContestTopic without action
   */
  export type ContestTopicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContestTopic
     */
    select?: ContestTopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContestTopicInclude<ExtArgs> | null
  }


  /**
   * Model StudySession
   */

  export type AggregateStudySession = {
    _count: StudySessionCountAggregateOutputType | null
    _avg: StudySessionAvgAggregateOutputType | null
    _sum: StudySessionSumAggregateOutputType | null
    _min: StudySessionMinAggregateOutputType | null
    _max: StudySessionMaxAggregateOutputType | null
  }

  export type StudySessionAvgAggregateOutputType = {
    quality: number | null
    easeFactor: number | null
    interval: number | null
    repetitions: number | null
  }

  export type StudySessionSumAggregateOutputType = {
    quality: number | null
    easeFactor: number | null
    interval: number | null
    repetitions: number | null
  }

  export type StudySessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    cardId: string | null
    contestId: string | null
    subtopicId: string | null
    reviewTime: Date | null
    quality: number | null
    easeFactor: number | null
    interval: number | null
    repetitions: number | null
    correct: boolean | null
    createdAt: Date | null
  }

  export type StudySessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    cardId: string | null
    contestId: string | null
    subtopicId: string | null
    reviewTime: Date | null
    quality: number | null
    easeFactor: number | null
    interval: number | null
    repetitions: number | null
    correct: boolean | null
    createdAt: Date | null
  }

  export type StudySessionCountAggregateOutputType = {
    id: number
    userId: number
    cardId: number
    contestId: number
    subtopicId: number
    reviewTime: number
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: number
    createdAt: number
    _all: number
  }


  export type StudySessionAvgAggregateInputType = {
    quality?: true
    easeFactor?: true
    interval?: true
    repetitions?: true
  }

  export type StudySessionSumAggregateInputType = {
    quality?: true
    easeFactor?: true
    interval?: true
    repetitions?: true
  }

  export type StudySessionMinAggregateInputType = {
    id?: true
    userId?: true
    cardId?: true
    contestId?: true
    subtopicId?: true
    reviewTime?: true
    quality?: true
    easeFactor?: true
    interval?: true
    repetitions?: true
    correct?: true
    createdAt?: true
  }

  export type StudySessionMaxAggregateInputType = {
    id?: true
    userId?: true
    cardId?: true
    contestId?: true
    subtopicId?: true
    reviewTime?: true
    quality?: true
    easeFactor?: true
    interval?: true
    repetitions?: true
    correct?: true
    createdAt?: true
  }

  export type StudySessionCountAggregateInputType = {
    id?: true
    userId?: true
    cardId?: true
    contestId?: true
    subtopicId?: true
    reviewTime?: true
    quality?: true
    easeFactor?: true
    interval?: true
    repetitions?: true
    correct?: true
    createdAt?: true
    _all?: true
  }

  export type StudySessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudySession to aggregate.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudySessions
    **/
    _count?: true | StudySessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudySessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudySessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudySessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudySessionMaxAggregateInputType
  }

  export type GetStudySessionAggregateType<T extends StudySessionAggregateArgs> = {
        [P in keyof T & keyof AggregateStudySession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudySession[P]>
      : GetScalarType<T[P], AggregateStudySession[P]>
  }




  export type StudySessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithAggregationInput | StudySessionOrderByWithAggregationInput[]
    by: StudySessionScalarFieldEnum[] | StudySessionScalarFieldEnum
    having?: StudySessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudySessionCountAggregateInputType | true
    _avg?: StudySessionAvgAggregateInputType
    _sum?: StudySessionSumAggregateInputType
    _min?: StudySessionMinAggregateInputType
    _max?: StudySessionMaxAggregateInputType
  }

  export type StudySessionGroupByOutputType = {
    id: string
    userId: string
    cardId: string
    contestId: string
    subtopicId: string | null
    reviewTime: Date
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt: Date
    _count: StudySessionCountAggregateOutputType | null
    _avg: StudySessionAvgAggregateOutputType | null
    _sum: StudySessionSumAggregateOutputType | null
    _min: StudySessionMinAggregateOutputType | null
    _max: StudySessionMaxAggregateOutputType | null
  }

  type GetStudySessionGroupByPayload<T extends StudySessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudySessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudySessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudySessionGroupByOutputType[P]>
            : GetScalarType<T[P], StudySessionGroupByOutputType[P]>
        }
      >
    >


  export type StudySessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cardId?: boolean
    contestId?: boolean
    subtopicId?: boolean
    reviewTime?: boolean
    quality?: boolean
    easeFactor?: boolean
    interval?: boolean
    repetitions?: boolean
    correct?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | StudySession$subtopicArgs<ExtArgs>
  }, ExtArgs["result"]["studySession"]>

  export type StudySessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cardId?: boolean
    contestId?: boolean
    subtopicId?: boolean
    reviewTime?: boolean
    quality?: boolean
    easeFactor?: boolean
    interval?: boolean
    repetitions?: boolean
    correct?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | StudySession$subtopicArgs<ExtArgs>
  }, ExtArgs["result"]["studySession"]>

  export type StudySessionSelectScalar = {
    id?: boolean
    userId?: boolean
    cardId?: boolean
    contestId?: boolean
    subtopicId?: boolean
    reviewTime?: boolean
    quality?: boolean
    easeFactor?: boolean
    interval?: boolean
    repetitions?: boolean
    correct?: boolean
    createdAt?: boolean
  }

  export type StudySessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | StudySession$subtopicArgs<ExtArgs>
  }
  export type StudySessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    contest?: boolean | ContestDefaultArgs<ExtArgs>
    subtopic?: boolean | StudySession$subtopicArgs<ExtArgs>
  }

  export type $StudySessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudySession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      card: Prisma.$CardPayload<ExtArgs>
      contest: Prisma.$ContestPayload<ExtArgs>
      subtopic: Prisma.$SubtopicPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      cardId: string
      contestId: string
      subtopicId: string | null
      reviewTime: Date
      quality: number
      easeFactor: number
      interval: number
      repetitions: number
      correct: boolean
      createdAt: Date
    }, ExtArgs["result"]["studySession"]>
    composites: {}
  }

  type StudySessionGetPayload<S extends boolean | null | undefined | StudySessionDefaultArgs> = $Result.GetResult<Prisma.$StudySessionPayload, S>

  type StudySessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudySessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudySessionCountAggregateInputType | true
    }

  export interface StudySessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudySession'], meta: { name: 'StudySession' } }
    /**
     * Find zero or one StudySession that matches the filter.
     * @param {StudySessionFindUniqueArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudySessionFindUniqueArgs>(args: SelectSubset<T, StudySessionFindUniqueArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StudySession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudySessionFindUniqueOrThrowArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudySessionFindUniqueOrThrowArgs>(args: SelectSubset<T, StudySessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StudySession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionFindFirstArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudySessionFindFirstArgs>(args?: SelectSubset<T, StudySessionFindFirstArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StudySession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionFindFirstOrThrowArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudySessionFindFirstOrThrowArgs>(args?: SelectSubset<T, StudySessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StudySessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudySessions
     * const studySessions = await prisma.studySession.findMany()
     * 
     * // Get first 10 StudySessions
     * const studySessions = await prisma.studySession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studySessionWithIdOnly = await prisma.studySession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudySessionFindManyArgs>(args?: SelectSubset<T, StudySessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StudySession.
     * @param {StudySessionCreateArgs} args - Arguments to create a StudySession.
     * @example
     * // Create one StudySession
     * const StudySession = await prisma.studySession.create({
     *   data: {
     *     // ... data to create a StudySession
     *   }
     * })
     * 
     */
    create<T extends StudySessionCreateArgs>(args: SelectSubset<T, StudySessionCreateArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StudySessions.
     * @param {StudySessionCreateManyArgs} args - Arguments to create many StudySessions.
     * @example
     * // Create many StudySessions
     * const studySession = await prisma.studySession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudySessionCreateManyArgs>(args?: SelectSubset<T, StudySessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudySessions and returns the data saved in the database.
     * @param {StudySessionCreateManyAndReturnArgs} args - Arguments to create many StudySessions.
     * @example
     * // Create many StudySessions
     * const studySession = await prisma.studySession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudySessions and only return the `id`
     * const studySessionWithIdOnly = await prisma.studySession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudySessionCreateManyAndReturnArgs>(args?: SelectSubset<T, StudySessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StudySession.
     * @param {StudySessionDeleteArgs} args - Arguments to delete one StudySession.
     * @example
     * // Delete one StudySession
     * const StudySession = await prisma.studySession.delete({
     *   where: {
     *     // ... filter to delete one StudySession
     *   }
     * })
     * 
     */
    delete<T extends StudySessionDeleteArgs>(args: SelectSubset<T, StudySessionDeleteArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StudySession.
     * @param {StudySessionUpdateArgs} args - Arguments to update one StudySession.
     * @example
     * // Update one StudySession
     * const studySession = await prisma.studySession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudySessionUpdateArgs>(args: SelectSubset<T, StudySessionUpdateArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StudySessions.
     * @param {StudySessionDeleteManyArgs} args - Arguments to filter StudySessions to delete.
     * @example
     * // Delete a few StudySessions
     * const { count } = await prisma.studySession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudySessionDeleteManyArgs>(args?: SelectSubset<T, StudySessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudySessions
     * const studySession = await prisma.studySession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudySessionUpdateManyArgs>(args: SelectSubset<T, StudySessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudySession.
     * @param {StudySessionUpsertArgs} args - Arguments to update or create a StudySession.
     * @example
     * // Update or create a StudySession
     * const studySession = await prisma.studySession.upsert({
     *   create: {
     *     // ... data to create a StudySession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudySession we want to update
     *   }
     * })
     */
    upsert<T extends StudySessionUpsertArgs>(args: SelectSubset<T, StudySessionUpsertArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StudySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionCountArgs} args - Arguments to filter StudySessions to count.
     * @example
     * // Count the number of StudySessions
     * const count = await prisma.studySession.count({
     *   where: {
     *     // ... the filter for the StudySessions we want to count
     *   }
     * })
    **/
    count<T extends StudySessionCountArgs>(
      args?: Subset<T, StudySessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudySessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudySessionAggregateArgs>(args: Subset<T, StudySessionAggregateArgs>): Prisma.PrismaPromise<GetStudySessionAggregateType<T>>

    /**
     * Group by StudySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudySessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudySessionGroupByArgs['orderBy'] }
        : { orderBy?: StudySessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudySessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudySessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudySession model
   */
  readonly fields: StudySessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudySession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudySessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    contest<T extends ContestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContestDefaultArgs<ExtArgs>>): Prisma__ContestClient<$Result.GetResult<Prisma.$ContestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subtopic<T extends StudySession$subtopicArgs<ExtArgs> = {}>(args?: Subset<T, StudySession$subtopicArgs<ExtArgs>>): Prisma__SubtopicClient<$Result.GetResult<Prisma.$SubtopicPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudySession model
   */ 
  interface StudySessionFieldRefs {
    readonly id: FieldRef<"StudySession", 'String'>
    readonly userId: FieldRef<"StudySession", 'String'>
    readonly cardId: FieldRef<"StudySession", 'String'>
    readonly contestId: FieldRef<"StudySession", 'String'>
    readonly subtopicId: FieldRef<"StudySession", 'String'>
    readonly reviewTime: FieldRef<"StudySession", 'DateTime'>
    readonly quality: FieldRef<"StudySession", 'Int'>
    readonly easeFactor: FieldRef<"StudySession", 'Float'>
    readonly interval: FieldRef<"StudySession", 'Int'>
    readonly repetitions: FieldRef<"StudySession", 'Int'>
    readonly correct: FieldRef<"StudySession", 'Boolean'>
    readonly createdAt: FieldRef<"StudySession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudySession findUnique
   */
  export type StudySessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession findUniqueOrThrow
   */
  export type StudySessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession findFirst
   */
  export type StudySessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudySessions.
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudySessions.
     */
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * StudySession findFirstOrThrow
   */
  export type StudySessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudySessions.
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudySessions.
     */
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * StudySession findMany
   */
  export type StudySessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySessions to fetch.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudySessions.
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * StudySession create
   */
  export type StudySessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * The data needed to create a StudySession.
     */
    data: XOR<StudySessionCreateInput, StudySessionUncheckedCreateInput>
  }

  /**
   * StudySession createMany
   */
  export type StudySessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudySessions.
     */
    data: StudySessionCreateManyInput | StudySessionCreateManyInput[]
  }

  /**
   * StudySession createManyAndReturn
   */
  export type StudySessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudySessions.
     */
    data: StudySessionCreateManyInput | StudySessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudySession update
   */
  export type StudySessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * The data needed to update a StudySession.
     */
    data: XOR<StudySessionUpdateInput, StudySessionUncheckedUpdateInput>
    /**
     * Choose, which StudySession to update.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession updateMany
   */
  export type StudySessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudySessions.
     */
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyInput>
    /**
     * Filter which StudySessions to update
     */
    where?: StudySessionWhereInput
  }

  /**
   * StudySession upsert
   */
  export type StudySessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * The filter to search for the StudySession to update in case it exists.
     */
    where: StudySessionWhereUniqueInput
    /**
     * In case the StudySession found by the `where` argument doesn't exist, create a new StudySession with this data.
     */
    create: XOR<StudySessionCreateInput, StudySessionUncheckedCreateInput>
    /**
     * In case the StudySession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudySessionUpdateInput, StudySessionUncheckedUpdateInput>
  }

  /**
   * StudySession delete
   */
  export type StudySessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter which StudySession to delete.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession deleteMany
   */
  export type StudySessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudySessions to delete
     */
    where?: StudySessionWhereInput
  }

  /**
   * StudySession.subtopic
   */
  export type StudySession$subtopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subtopic
     */
    select?: SubtopicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubtopicInclude<ExtArgs> | null
    where?: SubtopicWhereInput
  }

  /**
   * StudySession without action
   */
  export type StudySessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    subscriptionTier: 'subscriptionTier',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ContestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    editalFileId: 'editalFileId',
    parsedEditalData: 'parsedEditalData',
    processingError: 'processingError',
    isProcessing: 'isProcessing',
    targetDate: 'targetDate',
    examDate: 'examDate',
    selectedOffice: 'selectedOffice',
    institution: 'institution',
    position: 'position',
    noticeStorageId: 'noticeStorageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContestScalarFieldEnum = (typeof ContestScalarFieldEnum)[keyof typeof ContestScalarFieldEnum]


  export const TopicScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TopicScalarFieldEnum = (typeof TopicScalarFieldEnum)[keyof typeof TopicScalarFieldEnum]


  export const SubtopicScalarFieldEnum: {
    id: 'id',
    topicId: 'topicId',
    name: 'name',
    description: 'description',
    priority: 'priority',
    estimatedCards: 'estimatedCards',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubtopicScalarFieldEnum = (typeof SubtopicScalarFieldEnum)[keyof typeof SubtopicScalarFieldEnum]


  export const CardScalarFieldEnum: {
    id: 'id',
    subtopicId: 'subtopicId',
    front: 'front',
    back: 'back',
    createdBy: 'createdBy',
    repetitions: 'repetitions',
    easeFactor: 'easeFactor',
    interval: 'interval',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const UserCardScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    cardId: 'cardId',
    contestId: 'contestId',
    subtopicId: 'subtopicId',
    nextReviewTime: 'nextReviewTime',
    repetitions: 'repetitions',
    easeFactor: 'easeFactor',
    interval: 'interval',
    lastReviewed: 'lastReviewed',
    totalCorrectReviews: 'totalCorrectReviews',
    totalIncorrectReviews: 'totalIncorrectReviews',
    nextReview: 'nextReview',
    correctStreak: 'correctStreak',
    incorrectStreak: 'incorrectStreak',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserCardScalarFieldEnum = (typeof UserCardScalarFieldEnum)[keyof typeof UserCardScalarFieldEnum]


  export const ContestTopicScalarFieldEnum: {
    id: 'id',
    contestId: 'contestId',
    topicId: 'topicId',
    userId: 'userId',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContestTopicScalarFieldEnum = (typeof ContestTopicScalarFieldEnum)[keyof typeof ContestTopicScalarFieldEnum]


  export const StudySessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    cardId: 'cardId',
    contestId: 'contestId',
    subtopicId: 'subtopicId',
    reviewTime: 'reviewTime',
    quality: 'quality',
    easeFactor: 'easeFactor',
    interval: 'interval',
    repetitions: 'repetitions',
    correct: 'correct',
    createdAt: 'createdAt'
  };

  export type StudySessionScalarFieldEnum = (typeof StudySessionScalarFieldEnum)[keyof typeof StudySessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    subscriptionTier?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    contests?: ContestListRelationFilter
    cards?: CardListRelationFilter
    userCards?: UserCardListRelationFilter
    contestTopics?: ContestTopicListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    subscriptionTier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contests?: ContestOrderByRelationAggregateInput
    cards?: CardOrderByRelationAggregateInput
    userCards?: UserCardOrderByRelationAggregateInput
    contestTopics?: ContestTopicOrderByRelationAggregateInput
    studySessions?: StudySessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    subscriptionTier?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    contests?: ContestListRelationFilter
    cards?: CardListRelationFilter
    userCards?: UserCardListRelationFilter
    contestTopics?: ContestTopicListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    subscriptionTier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    subscriptionTier?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ContestWhereInput = {
    AND?: ContestWhereInput | ContestWhereInput[]
    OR?: ContestWhereInput[]
    NOT?: ContestWhereInput | ContestWhereInput[]
    id?: StringFilter<"Contest"> | string
    userId?: StringFilter<"Contest"> | string
    name?: StringFilter<"Contest"> | string
    description?: StringNullableFilter<"Contest"> | string | null
    editalFileId?: StringNullableFilter<"Contest"> | string | null
    parsedEditalData?: StringNullableFilter<"Contest"> | string | null
    processingError?: StringNullableFilter<"Contest"> | string | null
    isProcessing?: BoolFilter<"Contest"> | boolean
    targetDate?: DateTimeNullableFilter<"Contest"> | Date | string | null
    examDate?: StringNullableFilter<"Contest"> | string | null
    selectedOffice?: StringNullableFilter<"Contest"> | string | null
    institution?: StringNullableFilter<"Contest"> | string | null
    position?: StringNullableFilter<"Contest"> | string | null
    noticeStorageId?: StringNullableFilter<"Contest"> | string | null
    createdAt?: DateTimeFilter<"Contest"> | Date | string
    updatedAt?: DateTimeFilter<"Contest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    contestTopics?: ContestTopicListRelationFilter
    userCards?: UserCardListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }

  export type ContestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    editalFileId?: SortOrderInput | SortOrder
    parsedEditalData?: SortOrderInput | SortOrder
    processingError?: SortOrderInput | SortOrder
    isProcessing?: SortOrder
    targetDate?: SortOrderInput | SortOrder
    examDate?: SortOrderInput | SortOrder
    selectedOffice?: SortOrderInput | SortOrder
    institution?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    noticeStorageId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    contestTopics?: ContestTopicOrderByRelationAggregateInput
    userCards?: UserCardOrderByRelationAggregateInput
    studySessions?: StudySessionOrderByRelationAggregateInput
  }

  export type ContestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContestWhereInput | ContestWhereInput[]
    OR?: ContestWhereInput[]
    NOT?: ContestWhereInput | ContestWhereInput[]
    userId?: StringFilter<"Contest"> | string
    name?: StringFilter<"Contest"> | string
    description?: StringNullableFilter<"Contest"> | string | null
    editalFileId?: StringNullableFilter<"Contest"> | string | null
    parsedEditalData?: StringNullableFilter<"Contest"> | string | null
    processingError?: StringNullableFilter<"Contest"> | string | null
    isProcessing?: BoolFilter<"Contest"> | boolean
    targetDate?: DateTimeNullableFilter<"Contest"> | Date | string | null
    examDate?: StringNullableFilter<"Contest"> | string | null
    selectedOffice?: StringNullableFilter<"Contest"> | string | null
    institution?: StringNullableFilter<"Contest"> | string | null
    position?: StringNullableFilter<"Contest"> | string | null
    noticeStorageId?: StringNullableFilter<"Contest"> | string | null
    createdAt?: DateTimeFilter<"Contest"> | Date | string
    updatedAt?: DateTimeFilter<"Contest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    contestTopics?: ContestTopicListRelationFilter
    userCards?: UserCardListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }, "id">

  export type ContestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    editalFileId?: SortOrderInput | SortOrder
    parsedEditalData?: SortOrderInput | SortOrder
    processingError?: SortOrderInput | SortOrder
    isProcessing?: SortOrder
    targetDate?: SortOrderInput | SortOrder
    examDate?: SortOrderInput | SortOrder
    selectedOffice?: SortOrderInput | SortOrder
    institution?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    noticeStorageId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContestCountOrderByAggregateInput
    _max?: ContestMaxOrderByAggregateInput
    _min?: ContestMinOrderByAggregateInput
  }

  export type ContestScalarWhereWithAggregatesInput = {
    AND?: ContestScalarWhereWithAggregatesInput | ContestScalarWhereWithAggregatesInput[]
    OR?: ContestScalarWhereWithAggregatesInput[]
    NOT?: ContestScalarWhereWithAggregatesInput | ContestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contest"> | string
    userId?: StringWithAggregatesFilter<"Contest"> | string
    name?: StringWithAggregatesFilter<"Contest"> | string
    description?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    editalFileId?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    parsedEditalData?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    processingError?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    isProcessing?: BoolWithAggregatesFilter<"Contest"> | boolean
    targetDate?: DateTimeNullableWithAggregatesFilter<"Contest"> | Date | string | null
    examDate?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    selectedOffice?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    institution?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    position?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    noticeStorageId?: StringNullableWithAggregatesFilter<"Contest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contest"> | Date | string
  }

  export type TopicWhereInput = {
    AND?: TopicWhereInput | TopicWhereInput[]
    OR?: TopicWhereInput[]
    NOT?: TopicWhereInput | TopicWhereInput[]
    id?: StringFilter<"Topic"> | string
    name?: StringFilter<"Topic"> | string
    description?: StringNullableFilter<"Topic"> | string | null
    priority?: IntNullableFilter<"Topic"> | number | null
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
    subtopics?: SubtopicListRelationFilter
    contestTopics?: ContestTopicListRelationFilter
  }

  export type TopicOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subtopics?: SubtopicOrderByRelationAggregateInput
    contestTopics?: ContestTopicOrderByRelationAggregateInput
  }

  export type TopicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TopicWhereInput | TopicWhereInput[]
    OR?: TopicWhereInput[]
    NOT?: TopicWhereInput | TopicWhereInput[]
    description?: StringNullableFilter<"Topic"> | string | null
    priority?: IntNullableFilter<"Topic"> | number | null
    createdAt?: DateTimeFilter<"Topic"> | Date | string
    updatedAt?: DateTimeFilter<"Topic"> | Date | string
    subtopics?: SubtopicListRelationFilter
    contestTopics?: ContestTopicListRelationFilter
  }, "id" | "name">

  export type TopicOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TopicCountOrderByAggregateInput
    _avg?: TopicAvgOrderByAggregateInput
    _max?: TopicMaxOrderByAggregateInput
    _min?: TopicMinOrderByAggregateInput
    _sum?: TopicSumOrderByAggregateInput
  }

  export type TopicScalarWhereWithAggregatesInput = {
    AND?: TopicScalarWhereWithAggregatesInput | TopicScalarWhereWithAggregatesInput[]
    OR?: TopicScalarWhereWithAggregatesInput[]
    NOT?: TopicScalarWhereWithAggregatesInput | TopicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Topic"> | string
    name?: StringWithAggregatesFilter<"Topic"> | string
    description?: StringNullableWithAggregatesFilter<"Topic"> | string | null
    priority?: IntNullableWithAggregatesFilter<"Topic"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Topic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Topic"> | Date | string
  }

  export type SubtopicWhereInput = {
    AND?: SubtopicWhereInput | SubtopicWhereInput[]
    OR?: SubtopicWhereInput[]
    NOT?: SubtopicWhereInput | SubtopicWhereInput[]
    id?: StringFilter<"Subtopic"> | string
    topicId?: StringFilter<"Subtopic"> | string
    name?: StringFilter<"Subtopic"> | string
    description?: StringNullableFilter<"Subtopic"> | string | null
    priority?: IntNullableFilter<"Subtopic"> | number | null
    estimatedCards?: IntNullableFilter<"Subtopic"> | number | null
    createdAt?: DateTimeFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeFilter<"Subtopic"> | Date | string
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
    cards?: CardListRelationFilter
    userCards?: UserCardListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }

  export type SubtopicOrderByWithRelationInput = {
    id?: SortOrder
    topicId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    estimatedCards?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    topic?: TopicOrderByWithRelationInput
    cards?: CardOrderByRelationAggregateInput
    userCards?: UserCardOrderByRelationAggregateInput
    studySessions?: StudySessionOrderByRelationAggregateInput
  }

  export type SubtopicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    topicId_name?: SubtopicTopicIdNameCompoundUniqueInput
    AND?: SubtopicWhereInput | SubtopicWhereInput[]
    OR?: SubtopicWhereInput[]
    NOT?: SubtopicWhereInput | SubtopicWhereInput[]
    topicId?: StringFilter<"Subtopic"> | string
    name?: StringFilter<"Subtopic"> | string
    description?: StringNullableFilter<"Subtopic"> | string | null
    priority?: IntNullableFilter<"Subtopic"> | number | null
    estimatedCards?: IntNullableFilter<"Subtopic"> | number | null
    createdAt?: DateTimeFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeFilter<"Subtopic"> | Date | string
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
    cards?: CardListRelationFilter
    userCards?: UserCardListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }, "id" | "topicId_name">

  export type SubtopicOrderByWithAggregationInput = {
    id?: SortOrder
    topicId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    estimatedCards?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubtopicCountOrderByAggregateInput
    _avg?: SubtopicAvgOrderByAggregateInput
    _max?: SubtopicMaxOrderByAggregateInput
    _min?: SubtopicMinOrderByAggregateInput
    _sum?: SubtopicSumOrderByAggregateInput
  }

  export type SubtopicScalarWhereWithAggregatesInput = {
    AND?: SubtopicScalarWhereWithAggregatesInput | SubtopicScalarWhereWithAggregatesInput[]
    OR?: SubtopicScalarWhereWithAggregatesInput[]
    NOT?: SubtopicScalarWhereWithAggregatesInput | SubtopicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subtopic"> | string
    topicId?: StringWithAggregatesFilter<"Subtopic"> | string
    name?: StringWithAggregatesFilter<"Subtopic"> | string
    description?: StringNullableWithAggregatesFilter<"Subtopic"> | string | null
    priority?: IntNullableWithAggregatesFilter<"Subtopic"> | number | null
    estimatedCards?: IntNullableWithAggregatesFilter<"Subtopic"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subtopic"> | Date | string
  }

  export type CardWhereInput = {
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    id?: StringFilter<"Card"> | string
    subtopicId?: StringFilter<"Card"> | string
    front?: StringFilter<"Card"> | string
    back?: StringFilter<"Card"> | string
    createdBy?: StringFilter<"Card"> | string
    repetitions?: IntFilter<"Card"> | number
    easeFactor?: FloatFilter<"Card"> | number
    interval?: IntFilter<"Card"> | number
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
    subtopic?: XOR<SubtopicRelationFilter, SubtopicWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    userCards?: UserCardListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }

  export type CardOrderByWithRelationInput = {
    id?: SortOrder
    subtopicId?: SortOrder
    front?: SortOrder
    back?: SortOrder
    createdBy?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subtopic?: SubtopicOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    userCards?: UserCardOrderByRelationAggregateInput
    studySessions?: StudySessionOrderByRelationAggregateInput
  }

  export type CardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    subtopicId?: StringFilter<"Card"> | string
    front?: StringFilter<"Card"> | string
    back?: StringFilter<"Card"> | string
    createdBy?: StringFilter<"Card"> | string
    repetitions?: IntFilter<"Card"> | number
    easeFactor?: FloatFilter<"Card"> | number
    interval?: IntFilter<"Card"> | number
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
    subtopic?: XOR<SubtopicRelationFilter, SubtopicWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    userCards?: UserCardListRelationFilter
    studySessions?: StudySessionListRelationFilter
  }, "id">

  export type CardOrderByWithAggregationInput = {
    id?: SortOrder
    subtopicId?: SortOrder
    front?: SortOrder
    back?: SortOrder
    createdBy?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CardCountOrderByAggregateInput
    _avg?: CardAvgOrderByAggregateInput
    _max?: CardMaxOrderByAggregateInput
    _min?: CardMinOrderByAggregateInput
    _sum?: CardSumOrderByAggregateInput
  }

  export type CardScalarWhereWithAggregatesInput = {
    AND?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    OR?: CardScalarWhereWithAggregatesInput[]
    NOT?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Card"> | string
    subtopicId?: StringWithAggregatesFilter<"Card"> | string
    front?: StringWithAggregatesFilter<"Card"> | string
    back?: StringWithAggregatesFilter<"Card"> | string
    createdBy?: StringWithAggregatesFilter<"Card"> | string
    repetitions?: IntWithAggregatesFilter<"Card"> | number
    easeFactor?: FloatWithAggregatesFilter<"Card"> | number
    interval?: IntWithAggregatesFilter<"Card"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Card"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Card"> | Date | string
  }

  export type UserCardWhereInput = {
    AND?: UserCardWhereInput | UserCardWhereInput[]
    OR?: UserCardWhereInput[]
    NOT?: UserCardWhereInput | UserCardWhereInput[]
    id?: StringFilter<"UserCard"> | string
    userId?: StringFilter<"UserCard"> | string
    cardId?: StringFilter<"UserCard"> | string
    contestId?: StringFilter<"UserCard"> | string
    subtopicId?: StringNullableFilter<"UserCard"> | string | null
    nextReviewTime?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    repetitions?: IntFilter<"UserCard"> | number
    easeFactor?: FloatFilter<"UserCard"> | number
    interval?: IntFilter<"UserCard"> | number
    lastReviewed?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    totalCorrectReviews?: IntFilter<"UserCard"> | number
    totalIncorrectReviews?: IntFilter<"UserCard"> | number
    nextReview?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    correctStreak?: IntFilter<"UserCard"> | number
    incorrectStreak?: IntFilter<"UserCard"> | number
    status?: StringFilter<"UserCard"> | string
    createdAt?: DateTimeFilter<"UserCard"> | Date | string
    updatedAt?: DateTimeFilter<"UserCard"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    card?: XOR<CardRelationFilter, CardWhereInput>
    contest?: XOR<ContestRelationFilter, ContestWhereInput>
    subtopic?: XOR<SubtopicNullableRelationFilter, SubtopicWhereInput> | null
  }

  export type UserCardOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrderInput | SortOrder
    nextReviewTime?: SortOrderInput | SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    lastReviewed?: SortOrderInput | SortOrder
    totalCorrectReviews?: SortOrder
    totalIncorrectReviews?: SortOrder
    nextReview?: SortOrderInput | SortOrder
    correctStreak?: SortOrder
    incorrectStreak?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    card?: CardOrderByWithRelationInput
    contest?: ContestOrderByWithRelationInput
    subtopic?: SubtopicOrderByWithRelationInput
  }

  export type UserCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_cardId?: UserCardUserIdCardIdCompoundUniqueInput
    AND?: UserCardWhereInput | UserCardWhereInput[]
    OR?: UserCardWhereInput[]
    NOT?: UserCardWhereInput | UserCardWhereInput[]
    userId?: StringFilter<"UserCard"> | string
    cardId?: StringFilter<"UserCard"> | string
    contestId?: StringFilter<"UserCard"> | string
    subtopicId?: StringNullableFilter<"UserCard"> | string | null
    nextReviewTime?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    repetitions?: IntFilter<"UserCard"> | number
    easeFactor?: FloatFilter<"UserCard"> | number
    interval?: IntFilter<"UserCard"> | number
    lastReviewed?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    totalCorrectReviews?: IntFilter<"UserCard"> | number
    totalIncorrectReviews?: IntFilter<"UserCard"> | number
    nextReview?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    correctStreak?: IntFilter<"UserCard"> | number
    incorrectStreak?: IntFilter<"UserCard"> | number
    status?: StringFilter<"UserCard"> | string
    createdAt?: DateTimeFilter<"UserCard"> | Date | string
    updatedAt?: DateTimeFilter<"UserCard"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    card?: XOR<CardRelationFilter, CardWhereInput>
    contest?: XOR<ContestRelationFilter, ContestWhereInput>
    subtopic?: XOR<SubtopicNullableRelationFilter, SubtopicWhereInput> | null
  }, "id" | "userId_cardId">

  export type UserCardOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrderInput | SortOrder
    nextReviewTime?: SortOrderInput | SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    lastReviewed?: SortOrderInput | SortOrder
    totalCorrectReviews?: SortOrder
    totalIncorrectReviews?: SortOrder
    nextReview?: SortOrderInput | SortOrder
    correctStreak?: SortOrder
    incorrectStreak?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCardCountOrderByAggregateInput
    _avg?: UserCardAvgOrderByAggregateInput
    _max?: UserCardMaxOrderByAggregateInput
    _min?: UserCardMinOrderByAggregateInput
    _sum?: UserCardSumOrderByAggregateInput
  }

  export type UserCardScalarWhereWithAggregatesInput = {
    AND?: UserCardScalarWhereWithAggregatesInput | UserCardScalarWhereWithAggregatesInput[]
    OR?: UserCardScalarWhereWithAggregatesInput[]
    NOT?: UserCardScalarWhereWithAggregatesInput | UserCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserCard"> | string
    userId?: StringWithAggregatesFilter<"UserCard"> | string
    cardId?: StringWithAggregatesFilter<"UserCard"> | string
    contestId?: StringWithAggregatesFilter<"UserCard"> | string
    subtopicId?: StringNullableWithAggregatesFilter<"UserCard"> | string | null
    nextReviewTime?: DateTimeNullableWithAggregatesFilter<"UserCard"> | Date | string | null
    repetitions?: IntWithAggregatesFilter<"UserCard"> | number
    easeFactor?: FloatWithAggregatesFilter<"UserCard"> | number
    interval?: IntWithAggregatesFilter<"UserCard"> | number
    lastReviewed?: DateTimeNullableWithAggregatesFilter<"UserCard"> | Date | string | null
    totalCorrectReviews?: IntWithAggregatesFilter<"UserCard"> | number
    totalIncorrectReviews?: IntWithAggregatesFilter<"UserCard"> | number
    nextReview?: DateTimeNullableWithAggregatesFilter<"UserCard"> | Date | string | null
    correctStreak?: IntWithAggregatesFilter<"UserCard"> | number
    incorrectStreak?: IntWithAggregatesFilter<"UserCard"> | number
    status?: StringWithAggregatesFilter<"UserCard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserCard"> | Date | string
  }

  export type ContestTopicWhereInput = {
    AND?: ContestTopicWhereInput | ContestTopicWhereInput[]
    OR?: ContestTopicWhereInput[]
    NOT?: ContestTopicWhereInput | ContestTopicWhereInput[]
    id?: StringFilter<"ContestTopic"> | string
    contestId?: StringFilter<"ContestTopic"> | string
    topicId?: StringFilter<"ContestTopic"> | string
    userId?: StringFilter<"ContestTopic"> | string
    priority?: IntNullableFilter<"ContestTopic"> | number | null
    createdAt?: DateTimeFilter<"ContestTopic"> | Date | string
    updatedAt?: DateTimeFilter<"ContestTopic"> | Date | string
    contest?: XOR<ContestRelationFilter, ContestWhereInput>
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ContestTopicOrderByWithRelationInput = {
    id?: SortOrder
    contestId?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
    priority?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contest?: ContestOrderByWithRelationInput
    topic?: TopicOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ContestTopicWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    contestId_topicId?: ContestTopicContestIdTopicIdCompoundUniqueInput
    AND?: ContestTopicWhereInput | ContestTopicWhereInput[]
    OR?: ContestTopicWhereInput[]
    NOT?: ContestTopicWhereInput | ContestTopicWhereInput[]
    contestId?: StringFilter<"ContestTopic"> | string
    topicId?: StringFilter<"ContestTopic"> | string
    userId?: StringFilter<"ContestTopic"> | string
    priority?: IntNullableFilter<"ContestTopic"> | number | null
    createdAt?: DateTimeFilter<"ContestTopic"> | Date | string
    updatedAt?: DateTimeFilter<"ContestTopic"> | Date | string
    contest?: XOR<ContestRelationFilter, ContestWhereInput>
    topic?: XOR<TopicRelationFilter, TopicWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "contestId_topicId">

  export type ContestTopicOrderByWithAggregationInput = {
    id?: SortOrder
    contestId?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
    priority?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContestTopicCountOrderByAggregateInput
    _avg?: ContestTopicAvgOrderByAggregateInput
    _max?: ContestTopicMaxOrderByAggregateInput
    _min?: ContestTopicMinOrderByAggregateInput
    _sum?: ContestTopicSumOrderByAggregateInput
  }

  export type ContestTopicScalarWhereWithAggregatesInput = {
    AND?: ContestTopicScalarWhereWithAggregatesInput | ContestTopicScalarWhereWithAggregatesInput[]
    OR?: ContestTopicScalarWhereWithAggregatesInput[]
    NOT?: ContestTopicScalarWhereWithAggregatesInput | ContestTopicScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContestTopic"> | string
    contestId?: StringWithAggregatesFilter<"ContestTopic"> | string
    topicId?: StringWithAggregatesFilter<"ContestTopic"> | string
    userId?: StringWithAggregatesFilter<"ContestTopic"> | string
    priority?: IntNullableWithAggregatesFilter<"ContestTopic"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ContestTopic"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContestTopic"> | Date | string
  }

  export type StudySessionWhereInput = {
    AND?: StudySessionWhereInput | StudySessionWhereInput[]
    OR?: StudySessionWhereInput[]
    NOT?: StudySessionWhereInput | StudySessionWhereInput[]
    id?: StringFilter<"StudySession"> | string
    userId?: StringFilter<"StudySession"> | string
    cardId?: StringFilter<"StudySession"> | string
    contestId?: StringFilter<"StudySession"> | string
    subtopicId?: StringNullableFilter<"StudySession"> | string | null
    reviewTime?: DateTimeFilter<"StudySession"> | Date | string
    quality?: IntFilter<"StudySession"> | number
    easeFactor?: FloatFilter<"StudySession"> | number
    interval?: IntFilter<"StudySession"> | number
    repetitions?: IntFilter<"StudySession"> | number
    correct?: BoolFilter<"StudySession"> | boolean
    createdAt?: DateTimeFilter<"StudySession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    card?: XOR<CardRelationFilter, CardWhereInput>
    contest?: XOR<ContestRelationFilter, ContestWhereInput>
    subtopic?: XOR<SubtopicNullableRelationFilter, SubtopicWhereInput> | null
  }

  export type StudySessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrderInput | SortOrder
    reviewTime?: SortOrder
    quality?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    repetitions?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    card?: CardOrderByWithRelationInput
    contest?: ContestOrderByWithRelationInput
    subtopic?: SubtopicOrderByWithRelationInput
  }

  export type StudySessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudySessionWhereInput | StudySessionWhereInput[]
    OR?: StudySessionWhereInput[]
    NOT?: StudySessionWhereInput | StudySessionWhereInput[]
    userId?: StringFilter<"StudySession"> | string
    cardId?: StringFilter<"StudySession"> | string
    contestId?: StringFilter<"StudySession"> | string
    subtopicId?: StringNullableFilter<"StudySession"> | string | null
    reviewTime?: DateTimeFilter<"StudySession"> | Date | string
    quality?: IntFilter<"StudySession"> | number
    easeFactor?: FloatFilter<"StudySession"> | number
    interval?: IntFilter<"StudySession"> | number
    repetitions?: IntFilter<"StudySession"> | number
    correct?: BoolFilter<"StudySession"> | boolean
    createdAt?: DateTimeFilter<"StudySession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    card?: XOR<CardRelationFilter, CardWhereInput>
    contest?: XOR<ContestRelationFilter, ContestWhereInput>
    subtopic?: XOR<SubtopicNullableRelationFilter, SubtopicWhereInput> | null
  }, "id">

  export type StudySessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrderInput | SortOrder
    reviewTime?: SortOrder
    quality?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    repetitions?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
    _count?: StudySessionCountOrderByAggregateInput
    _avg?: StudySessionAvgOrderByAggregateInput
    _max?: StudySessionMaxOrderByAggregateInput
    _min?: StudySessionMinOrderByAggregateInput
    _sum?: StudySessionSumOrderByAggregateInput
  }

  export type StudySessionScalarWhereWithAggregatesInput = {
    AND?: StudySessionScalarWhereWithAggregatesInput | StudySessionScalarWhereWithAggregatesInput[]
    OR?: StudySessionScalarWhereWithAggregatesInput[]
    NOT?: StudySessionScalarWhereWithAggregatesInput | StudySessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudySession"> | string
    userId?: StringWithAggregatesFilter<"StudySession"> | string
    cardId?: StringWithAggregatesFilter<"StudySession"> | string
    contestId?: StringWithAggregatesFilter<"StudySession"> | string
    subtopicId?: StringNullableWithAggregatesFilter<"StudySession"> | string | null
    reviewTime?: DateTimeWithAggregatesFilter<"StudySession"> | Date | string
    quality?: IntWithAggregatesFilter<"StudySession"> | number
    easeFactor?: FloatWithAggregatesFilter<"StudySession"> | number
    interval?: IntWithAggregatesFilter<"StudySession"> | number
    repetitions?: IntWithAggregatesFilter<"StudySession"> | number
    correct?: BoolWithAggregatesFilter<"StudySession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"StudySession"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    userCards?: UserCardCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicCreateNestedManyWithoutUserInput
    studySessions?: StudySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutUserInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestCreateInput = {
    id?: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutContestsInput
    contestTopics?: ContestTopicCreateNestedManyWithoutContestInput
    userCards?: UserCardCreateNestedManyWithoutContestInput
    studySessions?: StudySessionCreateNestedManyWithoutContestInput
  }

  export type ContestUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutContestInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutContestInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutContestInput
  }

  export type ContestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutContestsNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutContestNestedInput
    userCards?: UserCardUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUpdateManyWithoutContestNestedInput
  }

  export type ContestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutContestNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutContestNestedInput
  }

  export type ContestCreateManyInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicCreateInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicCreateNestedManyWithoutTopicInput
    contestTopics?: ContestTopicCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicUncheckedCreateNestedManyWithoutTopicInput
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUpdateManyWithoutTopicNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUncheckedUpdateManyWithoutTopicNestedInput
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type TopicCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TopicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TopicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubtopicCreateInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic: TopicCreateNestedOneWithoutSubtopicsInput
    cards?: CardCreateNestedManyWithoutSubtopicInput
    userCards?: UserCardCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUncheckedCreateInput = {
    id?: string
    topicId: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutSubtopicInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutSubtopicsNestedInput
    cards?: CardUpdateManyWithoutSubtopicNestedInput
    userCards?: UserCardUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutSubtopicNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicCreateManyInput = {
    id?: string
    topicId: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubtopicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubtopicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardCreateInput = {
    id?: string
    front: string
    back: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopic: SubtopicCreateNestedOneWithoutCardsInput
    creator: UserCreateNestedOneWithoutCardsInput
    userCards?: UserCardCreateNestedManyWithoutCardInput
    studySessions?: StudySessionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateInput = {
    id?: string
    subtopicId: string
    front: string
    back: string
    createdBy: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userCards?: UserCardUncheckedCreateNestedManyWithoutCardInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopic?: SubtopicUpdateOneRequiredWithoutCardsNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    userCards?: UserCardUpdateManyWithoutCardNestedInput
    studySessions?: StudySessionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subtopicId?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCards?: UserCardUncheckedUpdateManyWithoutCardNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateManyInput = {
    id?: string
    subtopicId: string
    front: string
    back: string
    createdBy: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subtopicId?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardCreateInput = {
    id?: string
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserCardsInput
    card: CardCreateNestedOneWithoutUserCardsInput
    contest: ContestCreateNestedOneWithoutUserCardsInput
    subtopic?: SubtopicCreateNestedOneWithoutUserCardsInput
  }

  export type UserCardUncheckedCreateInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCardsNestedInput
    card?: CardUpdateOneRequiredWithoutUserCardsNestedInput
    contest?: ContestUpdateOneRequiredWithoutUserCardsNestedInput
    subtopic?: SubtopicUpdateOneWithoutUserCardsNestedInput
  }

  export type UserCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardCreateManyInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicCreateInput = {
    id?: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contest: ContestCreateNestedOneWithoutContestTopicsInput
    topic: TopicCreateNestedOneWithoutContestTopicsInput
    user: UserCreateNestedOneWithoutContestTopicsInput
  }

  export type ContestTopicUncheckedCreateInput = {
    id?: string
    contestId: string
    topicId: string
    userId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestTopicUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contest?: ContestUpdateOneRequiredWithoutContestTopicsNestedInput
    topic?: TopicUpdateOneRequiredWithoutContestTopicsNestedInput
    user?: UserUpdateOneRequiredWithoutContestTopicsNestedInput
  }

  export type ContestTopicUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicCreateManyInput = {
    id?: string
    contestId: string
    topicId: string
    userId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestTopicUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionCreateInput = {
    id?: string
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStudySessionsInput
    card: CardCreateNestedOneWithoutStudySessionsInput
    contest: ContestCreateNestedOneWithoutStudySessionsInput
    subtopic?: SubtopicCreateNestedOneWithoutStudySessionsInput
  }

  export type StudySessionUncheckedCreateInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type StudySessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudySessionsNestedInput
    card?: CardUpdateOneRequiredWithoutStudySessionsNestedInput
    contest?: ContestUpdateOneRequiredWithoutStudySessionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutStudySessionsNestedInput
  }

  export type StudySessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionCreateManyInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type StudySessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ContestListRelationFilter = {
    every?: ContestWhereInput
    some?: ContestWhereInput
    none?: ContestWhereInput
  }

  export type CardListRelationFilter = {
    every?: CardWhereInput
    some?: CardWhereInput
    none?: CardWhereInput
  }

  export type UserCardListRelationFilter = {
    every?: UserCardWhereInput
    some?: UserCardWhereInput
    none?: UserCardWhereInput
  }

  export type ContestTopicListRelationFilter = {
    every?: ContestTopicWhereInput
    some?: ContestTopicWhereInput
    none?: ContestTopicWhereInput
  }

  export type StudySessionListRelationFilter = {
    every?: StudySessionWhereInput
    some?: StudySessionWhereInput
    none?: StudySessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ContestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContestTopicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudySessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    subscriptionTier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    subscriptionTier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    subscriptionTier?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ContestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    editalFileId?: SortOrder
    parsedEditalData?: SortOrder
    processingError?: SortOrder
    isProcessing?: SortOrder
    targetDate?: SortOrder
    examDate?: SortOrder
    selectedOffice?: SortOrder
    institution?: SortOrder
    position?: SortOrder
    noticeStorageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    editalFileId?: SortOrder
    parsedEditalData?: SortOrder
    processingError?: SortOrder
    isProcessing?: SortOrder
    targetDate?: SortOrder
    examDate?: SortOrder
    selectedOffice?: SortOrder
    institution?: SortOrder
    position?: SortOrder
    noticeStorageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    editalFileId?: SortOrder
    parsedEditalData?: SortOrder
    processingError?: SortOrder
    isProcessing?: SortOrder
    targetDate?: SortOrder
    examDate?: SortOrder
    selectedOffice?: SortOrder
    institution?: SortOrder
    position?: SortOrder
    noticeStorageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SubtopicListRelationFilter = {
    every?: SubtopicWhereInput
    some?: SubtopicWhereInput
    none?: SubtopicWhereInput
  }

  export type SubtopicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TopicCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TopicAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type TopicMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TopicMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TopicSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type TopicRelationFilter = {
    is?: TopicWhereInput
    isNot?: TopicWhereInput
  }

  export type SubtopicTopicIdNameCompoundUniqueInput = {
    topicId: string
    name: string
  }

  export type SubtopicCountOrderByAggregateInput = {
    id?: SortOrder
    topicId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    estimatedCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubtopicAvgOrderByAggregateInput = {
    priority?: SortOrder
    estimatedCards?: SortOrder
  }

  export type SubtopicMaxOrderByAggregateInput = {
    id?: SortOrder
    topicId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    estimatedCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubtopicMinOrderByAggregateInput = {
    id?: SortOrder
    topicId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    estimatedCards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubtopicSumOrderByAggregateInput = {
    priority?: SortOrder
    estimatedCards?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SubtopicRelationFilter = {
    is?: SubtopicWhereInput
    isNot?: SubtopicWhereInput
  }

  export type CardCountOrderByAggregateInput = {
    id?: SortOrder
    subtopicId?: SortOrder
    front?: SortOrder
    back?: SortOrder
    createdBy?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardAvgOrderByAggregateInput = {
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
  }

  export type CardMaxOrderByAggregateInput = {
    id?: SortOrder
    subtopicId?: SortOrder
    front?: SortOrder
    back?: SortOrder
    createdBy?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardMinOrderByAggregateInput = {
    id?: SortOrder
    subtopicId?: SortOrder
    front?: SortOrder
    back?: SortOrder
    createdBy?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardSumOrderByAggregateInput = {
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CardRelationFilter = {
    is?: CardWhereInput
    isNot?: CardWhereInput
  }

  export type ContestRelationFilter = {
    is?: ContestWhereInput
    isNot?: ContestWhereInput
  }

  export type SubtopicNullableRelationFilter = {
    is?: SubtopicWhereInput | null
    isNot?: SubtopicWhereInput | null
  }

  export type UserCardUserIdCardIdCompoundUniqueInput = {
    userId: string
    cardId: string
  }

  export type UserCardCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrder
    nextReviewTime?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    lastReviewed?: SortOrder
    totalCorrectReviews?: SortOrder
    totalIncorrectReviews?: SortOrder
    nextReview?: SortOrder
    correctStreak?: SortOrder
    incorrectStreak?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardAvgOrderByAggregateInput = {
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    totalCorrectReviews?: SortOrder
    totalIncorrectReviews?: SortOrder
    correctStreak?: SortOrder
    incorrectStreak?: SortOrder
  }

  export type UserCardMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrder
    nextReviewTime?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    lastReviewed?: SortOrder
    totalCorrectReviews?: SortOrder
    totalIncorrectReviews?: SortOrder
    nextReview?: SortOrder
    correctStreak?: SortOrder
    incorrectStreak?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrder
    nextReviewTime?: SortOrder
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    lastReviewed?: SortOrder
    totalCorrectReviews?: SortOrder
    totalIncorrectReviews?: SortOrder
    nextReview?: SortOrder
    correctStreak?: SortOrder
    incorrectStreak?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCardSumOrderByAggregateInput = {
    repetitions?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    totalCorrectReviews?: SortOrder
    totalIncorrectReviews?: SortOrder
    correctStreak?: SortOrder
    incorrectStreak?: SortOrder
  }

  export type ContestTopicContestIdTopicIdCompoundUniqueInput = {
    contestId: string
    topicId: string
  }

  export type ContestTopicCountOrderByAggregateInput = {
    id?: SortOrder
    contestId?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContestTopicAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type ContestTopicMaxOrderByAggregateInput = {
    id?: SortOrder
    contestId?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContestTopicMinOrderByAggregateInput = {
    id?: SortOrder
    contestId?: SortOrder
    topicId?: SortOrder
    userId?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContestTopicSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type StudySessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrder
    reviewTime?: SortOrder
    quality?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    repetitions?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
  }

  export type StudySessionAvgOrderByAggregateInput = {
    quality?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    repetitions?: SortOrder
  }

  export type StudySessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrder
    reviewTime?: SortOrder
    quality?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    repetitions?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
  }

  export type StudySessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cardId?: SortOrder
    contestId?: SortOrder
    subtopicId?: SortOrder
    reviewTime?: SortOrder
    quality?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    repetitions?: SortOrder
    correct?: SortOrder
    createdAt?: SortOrder
  }

  export type StudySessionSumOrderByAggregateInput = {
    quality?: SortOrder
    easeFactor?: SortOrder
    interval?: SortOrder
    repetitions?: SortOrder
  }

  export type ContestCreateNestedManyWithoutUserInput = {
    create?: XOR<ContestCreateWithoutUserInput, ContestUncheckedCreateWithoutUserInput> | ContestCreateWithoutUserInput[] | ContestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestCreateOrConnectWithoutUserInput | ContestCreateOrConnectWithoutUserInput[]
    createMany?: ContestCreateManyUserInputEnvelope
    connect?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
  }

  export type CardCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type UserCardCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCardCreateWithoutUserInput, UserCardUncheckedCreateWithoutUserInput> | UserCardCreateWithoutUserInput[] | UserCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutUserInput | UserCardCreateOrConnectWithoutUserInput[]
    createMany?: UserCardCreateManyUserInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type ContestTopicCreateNestedManyWithoutUserInput = {
    create?: XOR<ContestTopicCreateWithoutUserInput, ContestTopicUncheckedCreateWithoutUserInput> | ContestTopicCreateWithoutUserInput[] | ContestTopicUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutUserInput | ContestTopicCreateOrConnectWithoutUserInput[]
    createMany?: ContestTopicCreateManyUserInputEnvelope
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
  }

  export type StudySessionCreateNestedManyWithoutUserInput = {
    create?: XOR<StudySessionCreateWithoutUserInput, StudySessionUncheckedCreateWithoutUserInput> | StudySessionCreateWithoutUserInput[] | StudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutUserInput | StudySessionCreateOrConnectWithoutUserInput[]
    createMany?: StudySessionCreateManyUserInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type ContestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContestCreateWithoutUserInput, ContestUncheckedCreateWithoutUserInput> | ContestCreateWithoutUserInput[] | ContestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestCreateOrConnectWithoutUserInput | ContestCreateOrConnectWithoutUserInput[]
    createMany?: ContestCreateManyUserInputEnvelope
    connect?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
  }

  export type CardUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type UserCardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCardCreateWithoutUserInput, UserCardUncheckedCreateWithoutUserInput> | UserCardCreateWithoutUserInput[] | UserCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutUserInput | UserCardCreateOrConnectWithoutUserInput[]
    createMany?: UserCardCreateManyUserInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type ContestTopicUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContestTopicCreateWithoutUserInput, ContestTopicUncheckedCreateWithoutUserInput> | ContestTopicCreateWithoutUserInput[] | ContestTopicUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutUserInput | ContestTopicCreateOrConnectWithoutUserInput[]
    createMany?: ContestTopicCreateManyUserInputEnvelope
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
  }

  export type StudySessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StudySessionCreateWithoutUserInput, StudySessionUncheckedCreateWithoutUserInput> | StudySessionCreateWithoutUserInput[] | StudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutUserInput | StudySessionCreateOrConnectWithoutUserInput[]
    createMany?: StudySessionCreateManyUserInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ContestUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContestCreateWithoutUserInput, ContestUncheckedCreateWithoutUserInput> | ContestCreateWithoutUserInput[] | ContestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestCreateOrConnectWithoutUserInput | ContestCreateOrConnectWithoutUserInput[]
    upsert?: ContestUpsertWithWhereUniqueWithoutUserInput | ContestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContestCreateManyUserInputEnvelope
    set?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    disconnect?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    delete?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    connect?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    update?: ContestUpdateWithWhereUniqueWithoutUserInput | ContestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContestUpdateManyWithWhereWithoutUserInput | ContestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContestScalarWhereInput | ContestScalarWhereInput[]
  }

  export type CardUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCreatorInput | CardUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCreatorInput | CardUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCreatorInput | CardUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type UserCardUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCardCreateWithoutUserInput, UserCardUncheckedCreateWithoutUserInput> | UserCardCreateWithoutUserInput[] | UserCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutUserInput | UserCardCreateOrConnectWithoutUserInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutUserInput | UserCardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCardCreateManyUserInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutUserInput | UserCardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutUserInput | UserCardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type ContestTopicUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContestTopicCreateWithoutUserInput, ContestTopicUncheckedCreateWithoutUserInput> | ContestTopicCreateWithoutUserInput[] | ContestTopicUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutUserInput | ContestTopicCreateOrConnectWithoutUserInput[]
    upsert?: ContestTopicUpsertWithWhereUniqueWithoutUserInput | ContestTopicUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContestTopicCreateManyUserInputEnvelope
    set?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    disconnect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    delete?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    update?: ContestTopicUpdateWithWhereUniqueWithoutUserInput | ContestTopicUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContestTopicUpdateManyWithWhereWithoutUserInput | ContestTopicUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
  }

  export type StudySessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudySessionCreateWithoutUserInput, StudySessionUncheckedCreateWithoutUserInput> | StudySessionCreateWithoutUserInput[] | StudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutUserInput | StudySessionCreateOrConnectWithoutUserInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutUserInput | StudySessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudySessionCreateManyUserInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutUserInput | StudySessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutUserInput | StudySessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type ContestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContestCreateWithoutUserInput, ContestUncheckedCreateWithoutUserInput> | ContestCreateWithoutUserInput[] | ContestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestCreateOrConnectWithoutUserInput | ContestCreateOrConnectWithoutUserInput[]
    upsert?: ContestUpsertWithWhereUniqueWithoutUserInput | ContestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContestCreateManyUserInputEnvelope
    set?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    disconnect?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    delete?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    connect?: ContestWhereUniqueInput | ContestWhereUniqueInput[]
    update?: ContestUpdateWithWhereUniqueWithoutUserInput | ContestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContestUpdateManyWithWhereWithoutUserInput | ContestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContestScalarWhereInput | ContestScalarWhereInput[]
  }

  export type CardUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCreatorInput | CardUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCreatorInput | CardUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCreatorInput | CardUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type UserCardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCardCreateWithoutUserInput, UserCardUncheckedCreateWithoutUserInput> | UserCardCreateWithoutUserInput[] | UserCardUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutUserInput | UserCardCreateOrConnectWithoutUserInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutUserInput | UserCardUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCardCreateManyUserInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutUserInput | UserCardUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutUserInput | UserCardUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type ContestTopicUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContestTopicCreateWithoutUserInput, ContestTopicUncheckedCreateWithoutUserInput> | ContestTopicCreateWithoutUserInput[] | ContestTopicUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutUserInput | ContestTopicCreateOrConnectWithoutUserInput[]
    upsert?: ContestTopicUpsertWithWhereUniqueWithoutUserInput | ContestTopicUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContestTopicCreateManyUserInputEnvelope
    set?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    disconnect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    delete?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    update?: ContestTopicUpdateWithWhereUniqueWithoutUserInput | ContestTopicUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContestTopicUpdateManyWithWhereWithoutUserInput | ContestTopicUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
  }

  export type StudySessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StudySessionCreateWithoutUserInput, StudySessionUncheckedCreateWithoutUserInput> | StudySessionCreateWithoutUserInput[] | StudySessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutUserInput | StudySessionCreateOrConnectWithoutUserInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutUserInput | StudySessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StudySessionCreateManyUserInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutUserInput | StudySessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutUserInput | StudySessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutContestsInput = {
    create?: XOR<UserCreateWithoutContestsInput, UserUncheckedCreateWithoutContestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContestsInput
    connect?: UserWhereUniqueInput
  }

  export type ContestTopicCreateNestedManyWithoutContestInput = {
    create?: XOR<ContestTopicCreateWithoutContestInput, ContestTopicUncheckedCreateWithoutContestInput> | ContestTopicCreateWithoutContestInput[] | ContestTopicUncheckedCreateWithoutContestInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutContestInput | ContestTopicCreateOrConnectWithoutContestInput[]
    createMany?: ContestTopicCreateManyContestInputEnvelope
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
  }

  export type UserCardCreateNestedManyWithoutContestInput = {
    create?: XOR<UserCardCreateWithoutContestInput, UserCardUncheckedCreateWithoutContestInput> | UserCardCreateWithoutContestInput[] | UserCardUncheckedCreateWithoutContestInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutContestInput | UserCardCreateOrConnectWithoutContestInput[]
    createMany?: UserCardCreateManyContestInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type StudySessionCreateNestedManyWithoutContestInput = {
    create?: XOR<StudySessionCreateWithoutContestInput, StudySessionUncheckedCreateWithoutContestInput> | StudySessionCreateWithoutContestInput[] | StudySessionUncheckedCreateWithoutContestInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutContestInput | StudySessionCreateOrConnectWithoutContestInput[]
    createMany?: StudySessionCreateManyContestInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type ContestTopicUncheckedCreateNestedManyWithoutContestInput = {
    create?: XOR<ContestTopicCreateWithoutContestInput, ContestTopicUncheckedCreateWithoutContestInput> | ContestTopicCreateWithoutContestInput[] | ContestTopicUncheckedCreateWithoutContestInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutContestInput | ContestTopicCreateOrConnectWithoutContestInput[]
    createMany?: ContestTopicCreateManyContestInputEnvelope
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
  }

  export type UserCardUncheckedCreateNestedManyWithoutContestInput = {
    create?: XOR<UserCardCreateWithoutContestInput, UserCardUncheckedCreateWithoutContestInput> | UserCardCreateWithoutContestInput[] | UserCardUncheckedCreateWithoutContestInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutContestInput | UserCardCreateOrConnectWithoutContestInput[]
    createMany?: UserCardCreateManyContestInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type StudySessionUncheckedCreateNestedManyWithoutContestInput = {
    create?: XOR<StudySessionCreateWithoutContestInput, StudySessionUncheckedCreateWithoutContestInput> | StudySessionCreateWithoutContestInput[] | StudySessionUncheckedCreateWithoutContestInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutContestInput | StudySessionCreateOrConnectWithoutContestInput[]
    createMany?: StudySessionCreateManyContestInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutContestsNestedInput = {
    create?: XOR<UserCreateWithoutContestsInput, UserUncheckedCreateWithoutContestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContestsInput
    upsert?: UserUpsertWithoutContestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContestsInput, UserUpdateWithoutContestsInput>, UserUncheckedUpdateWithoutContestsInput>
  }

  export type ContestTopicUpdateManyWithoutContestNestedInput = {
    create?: XOR<ContestTopicCreateWithoutContestInput, ContestTopicUncheckedCreateWithoutContestInput> | ContestTopicCreateWithoutContestInput[] | ContestTopicUncheckedCreateWithoutContestInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutContestInput | ContestTopicCreateOrConnectWithoutContestInput[]
    upsert?: ContestTopicUpsertWithWhereUniqueWithoutContestInput | ContestTopicUpsertWithWhereUniqueWithoutContestInput[]
    createMany?: ContestTopicCreateManyContestInputEnvelope
    set?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    disconnect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    delete?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    update?: ContestTopicUpdateWithWhereUniqueWithoutContestInput | ContestTopicUpdateWithWhereUniqueWithoutContestInput[]
    updateMany?: ContestTopicUpdateManyWithWhereWithoutContestInput | ContestTopicUpdateManyWithWhereWithoutContestInput[]
    deleteMany?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
  }

  export type UserCardUpdateManyWithoutContestNestedInput = {
    create?: XOR<UserCardCreateWithoutContestInput, UserCardUncheckedCreateWithoutContestInput> | UserCardCreateWithoutContestInput[] | UserCardUncheckedCreateWithoutContestInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutContestInput | UserCardCreateOrConnectWithoutContestInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutContestInput | UserCardUpsertWithWhereUniqueWithoutContestInput[]
    createMany?: UserCardCreateManyContestInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutContestInput | UserCardUpdateWithWhereUniqueWithoutContestInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutContestInput | UserCardUpdateManyWithWhereWithoutContestInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type StudySessionUpdateManyWithoutContestNestedInput = {
    create?: XOR<StudySessionCreateWithoutContestInput, StudySessionUncheckedCreateWithoutContestInput> | StudySessionCreateWithoutContestInput[] | StudySessionUncheckedCreateWithoutContestInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutContestInput | StudySessionCreateOrConnectWithoutContestInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutContestInput | StudySessionUpsertWithWhereUniqueWithoutContestInput[]
    createMany?: StudySessionCreateManyContestInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutContestInput | StudySessionUpdateWithWhereUniqueWithoutContestInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutContestInput | StudySessionUpdateManyWithWhereWithoutContestInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type ContestTopicUncheckedUpdateManyWithoutContestNestedInput = {
    create?: XOR<ContestTopicCreateWithoutContestInput, ContestTopicUncheckedCreateWithoutContestInput> | ContestTopicCreateWithoutContestInput[] | ContestTopicUncheckedCreateWithoutContestInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutContestInput | ContestTopicCreateOrConnectWithoutContestInput[]
    upsert?: ContestTopicUpsertWithWhereUniqueWithoutContestInput | ContestTopicUpsertWithWhereUniqueWithoutContestInput[]
    createMany?: ContestTopicCreateManyContestInputEnvelope
    set?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    disconnect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    delete?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    update?: ContestTopicUpdateWithWhereUniqueWithoutContestInput | ContestTopicUpdateWithWhereUniqueWithoutContestInput[]
    updateMany?: ContestTopicUpdateManyWithWhereWithoutContestInput | ContestTopicUpdateManyWithWhereWithoutContestInput[]
    deleteMany?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
  }

  export type UserCardUncheckedUpdateManyWithoutContestNestedInput = {
    create?: XOR<UserCardCreateWithoutContestInput, UserCardUncheckedCreateWithoutContestInput> | UserCardCreateWithoutContestInput[] | UserCardUncheckedCreateWithoutContestInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutContestInput | UserCardCreateOrConnectWithoutContestInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutContestInput | UserCardUpsertWithWhereUniqueWithoutContestInput[]
    createMany?: UserCardCreateManyContestInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutContestInput | UserCardUpdateWithWhereUniqueWithoutContestInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutContestInput | UserCardUpdateManyWithWhereWithoutContestInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type StudySessionUncheckedUpdateManyWithoutContestNestedInput = {
    create?: XOR<StudySessionCreateWithoutContestInput, StudySessionUncheckedCreateWithoutContestInput> | StudySessionCreateWithoutContestInput[] | StudySessionUncheckedCreateWithoutContestInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutContestInput | StudySessionCreateOrConnectWithoutContestInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutContestInput | StudySessionUpsertWithWhereUniqueWithoutContestInput[]
    createMany?: StudySessionCreateManyContestInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutContestInput | StudySessionUpdateWithWhereUniqueWithoutContestInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutContestInput | StudySessionUpdateManyWithWhereWithoutContestInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type SubtopicCreateNestedManyWithoutTopicInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
  }

  export type ContestTopicCreateNestedManyWithoutTopicInput = {
    create?: XOR<ContestTopicCreateWithoutTopicInput, ContestTopicUncheckedCreateWithoutTopicInput> | ContestTopicCreateWithoutTopicInput[] | ContestTopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutTopicInput | ContestTopicCreateOrConnectWithoutTopicInput[]
    createMany?: ContestTopicCreateManyTopicInputEnvelope
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
  }

  export type SubtopicUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
  }

  export type ContestTopicUncheckedCreateNestedManyWithoutTopicInput = {
    create?: XOR<ContestTopicCreateWithoutTopicInput, ContestTopicUncheckedCreateWithoutTopicInput> | ContestTopicCreateWithoutTopicInput[] | ContestTopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutTopicInput | ContestTopicCreateOrConnectWithoutTopicInput[]
    createMany?: ContestTopicCreateManyTopicInputEnvelope
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubtopicUpdateManyWithoutTopicNestedInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    upsert?: SubtopicUpsertWithWhereUniqueWithoutTopicInput | SubtopicUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    set?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    disconnect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    delete?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    update?: SubtopicUpdateWithWhereUniqueWithoutTopicInput | SubtopicUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: SubtopicUpdateManyWithWhereWithoutTopicInput | SubtopicUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
  }

  export type ContestTopicUpdateManyWithoutTopicNestedInput = {
    create?: XOR<ContestTopicCreateWithoutTopicInput, ContestTopicUncheckedCreateWithoutTopicInput> | ContestTopicCreateWithoutTopicInput[] | ContestTopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutTopicInput | ContestTopicCreateOrConnectWithoutTopicInput[]
    upsert?: ContestTopicUpsertWithWhereUniqueWithoutTopicInput | ContestTopicUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: ContestTopicCreateManyTopicInputEnvelope
    set?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    disconnect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    delete?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    update?: ContestTopicUpdateWithWhereUniqueWithoutTopicInput | ContestTopicUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: ContestTopicUpdateManyWithWhereWithoutTopicInput | ContestTopicUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
  }

  export type SubtopicUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput> | SubtopicCreateWithoutTopicInput[] | SubtopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: SubtopicCreateOrConnectWithoutTopicInput | SubtopicCreateOrConnectWithoutTopicInput[]
    upsert?: SubtopicUpsertWithWhereUniqueWithoutTopicInput | SubtopicUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: SubtopicCreateManyTopicInputEnvelope
    set?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    disconnect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    delete?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    connect?: SubtopicWhereUniqueInput | SubtopicWhereUniqueInput[]
    update?: SubtopicUpdateWithWhereUniqueWithoutTopicInput | SubtopicUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: SubtopicUpdateManyWithWhereWithoutTopicInput | SubtopicUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
  }

  export type ContestTopicUncheckedUpdateManyWithoutTopicNestedInput = {
    create?: XOR<ContestTopicCreateWithoutTopicInput, ContestTopicUncheckedCreateWithoutTopicInput> | ContestTopicCreateWithoutTopicInput[] | ContestTopicUncheckedCreateWithoutTopicInput[]
    connectOrCreate?: ContestTopicCreateOrConnectWithoutTopicInput | ContestTopicCreateOrConnectWithoutTopicInput[]
    upsert?: ContestTopicUpsertWithWhereUniqueWithoutTopicInput | ContestTopicUpsertWithWhereUniqueWithoutTopicInput[]
    createMany?: ContestTopicCreateManyTopicInputEnvelope
    set?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    disconnect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    delete?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    connect?: ContestTopicWhereUniqueInput | ContestTopicWhereUniqueInput[]
    update?: ContestTopicUpdateWithWhereUniqueWithoutTopicInput | ContestTopicUpdateWithWhereUniqueWithoutTopicInput[]
    updateMany?: ContestTopicUpdateManyWithWhereWithoutTopicInput | ContestTopicUpdateManyWithWhereWithoutTopicInput[]
    deleteMany?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
  }

  export type TopicCreateNestedOneWithoutSubtopicsInput = {
    create?: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutSubtopicsInput
    connect?: TopicWhereUniqueInput
  }

  export type CardCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<CardCreateWithoutSubtopicInput, CardUncheckedCreateWithoutSubtopicInput> | CardCreateWithoutSubtopicInput[] | CardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: CardCreateOrConnectWithoutSubtopicInput | CardCreateOrConnectWithoutSubtopicInput[]
    createMany?: CardCreateManySubtopicInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type UserCardCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<UserCardCreateWithoutSubtopicInput, UserCardUncheckedCreateWithoutSubtopicInput> | UserCardCreateWithoutSubtopicInput[] | UserCardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutSubtopicInput | UserCardCreateOrConnectWithoutSubtopicInput[]
    createMany?: UserCardCreateManySubtopicInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type StudySessionCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<StudySessionCreateWithoutSubtopicInput, StudySessionUncheckedCreateWithoutSubtopicInput> | StudySessionCreateWithoutSubtopicInput[] | StudySessionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutSubtopicInput | StudySessionCreateOrConnectWithoutSubtopicInput[]
    createMany?: StudySessionCreateManySubtopicInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type CardUncheckedCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<CardCreateWithoutSubtopicInput, CardUncheckedCreateWithoutSubtopicInput> | CardCreateWithoutSubtopicInput[] | CardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: CardCreateOrConnectWithoutSubtopicInput | CardCreateOrConnectWithoutSubtopicInput[]
    createMany?: CardCreateManySubtopicInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type UserCardUncheckedCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<UserCardCreateWithoutSubtopicInput, UserCardUncheckedCreateWithoutSubtopicInput> | UserCardCreateWithoutSubtopicInput[] | UserCardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutSubtopicInput | UserCardCreateOrConnectWithoutSubtopicInput[]
    createMany?: UserCardCreateManySubtopicInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type StudySessionUncheckedCreateNestedManyWithoutSubtopicInput = {
    create?: XOR<StudySessionCreateWithoutSubtopicInput, StudySessionUncheckedCreateWithoutSubtopicInput> | StudySessionCreateWithoutSubtopicInput[] | StudySessionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutSubtopicInput | StudySessionCreateOrConnectWithoutSubtopicInput[]
    createMany?: StudySessionCreateManySubtopicInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type TopicUpdateOneRequiredWithoutSubtopicsNestedInput = {
    create?: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutSubtopicsInput
    upsert?: TopicUpsertWithoutSubtopicsInput
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutSubtopicsInput, TopicUpdateWithoutSubtopicsInput>, TopicUncheckedUpdateWithoutSubtopicsInput>
  }

  export type CardUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<CardCreateWithoutSubtopicInput, CardUncheckedCreateWithoutSubtopicInput> | CardCreateWithoutSubtopicInput[] | CardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: CardCreateOrConnectWithoutSubtopicInput | CardCreateOrConnectWithoutSubtopicInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutSubtopicInput | CardUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: CardCreateManySubtopicInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutSubtopicInput | CardUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: CardUpdateManyWithWhereWithoutSubtopicInput | CardUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type UserCardUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<UserCardCreateWithoutSubtopicInput, UserCardUncheckedCreateWithoutSubtopicInput> | UserCardCreateWithoutSubtopicInput[] | UserCardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutSubtopicInput | UserCardCreateOrConnectWithoutSubtopicInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutSubtopicInput | UserCardUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: UserCardCreateManySubtopicInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutSubtopicInput | UserCardUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutSubtopicInput | UserCardUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type StudySessionUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<StudySessionCreateWithoutSubtopicInput, StudySessionUncheckedCreateWithoutSubtopicInput> | StudySessionCreateWithoutSubtopicInput[] | StudySessionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutSubtopicInput | StudySessionCreateOrConnectWithoutSubtopicInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutSubtopicInput | StudySessionUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: StudySessionCreateManySubtopicInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutSubtopicInput | StudySessionUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutSubtopicInput | StudySessionUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type CardUncheckedUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<CardCreateWithoutSubtopicInput, CardUncheckedCreateWithoutSubtopicInput> | CardCreateWithoutSubtopicInput[] | CardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: CardCreateOrConnectWithoutSubtopicInput | CardCreateOrConnectWithoutSubtopicInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutSubtopicInput | CardUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: CardCreateManySubtopicInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutSubtopicInput | CardUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: CardUpdateManyWithWhereWithoutSubtopicInput | CardUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type UserCardUncheckedUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<UserCardCreateWithoutSubtopicInput, UserCardUncheckedCreateWithoutSubtopicInput> | UserCardCreateWithoutSubtopicInput[] | UserCardUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutSubtopicInput | UserCardCreateOrConnectWithoutSubtopicInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutSubtopicInput | UserCardUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: UserCardCreateManySubtopicInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutSubtopicInput | UserCardUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutSubtopicInput | UserCardUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type StudySessionUncheckedUpdateManyWithoutSubtopicNestedInput = {
    create?: XOR<StudySessionCreateWithoutSubtopicInput, StudySessionUncheckedCreateWithoutSubtopicInput> | StudySessionCreateWithoutSubtopicInput[] | StudySessionUncheckedCreateWithoutSubtopicInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutSubtopicInput | StudySessionCreateOrConnectWithoutSubtopicInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutSubtopicInput | StudySessionUpsertWithWhereUniqueWithoutSubtopicInput[]
    createMany?: StudySessionCreateManySubtopicInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutSubtopicInput | StudySessionUpdateWithWhereUniqueWithoutSubtopicInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutSubtopicInput | StudySessionUpdateManyWithWhereWithoutSubtopicInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type SubtopicCreateNestedOneWithoutCardsInput = {
    create?: XOR<SubtopicCreateWithoutCardsInput, SubtopicUncheckedCreateWithoutCardsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutCardsInput
    connect?: SubtopicWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCardsInput = {
    create?: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCardCreateNestedManyWithoutCardInput = {
    create?: XOR<UserCardCreateWithoutCardInput, UserCardUncheckedCreateWithoutCardInput> | UserCardCreateWithoutCardInput[] | UserCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutCardInput | UserCardCreateOrConnectWithoutCardInput[]
    createMany?: UserCardCreateManyCardInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type StudySessionCreateNestedManyWithoutCardInput = {
    create?: XOR<StudySessionCreateWithoutCardInput, StudySessionUncheckedCreateWithoutCardInput> | StudySessionCreateWithoutCardInput[] | StudySessionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutCardInput | StudySessionCreateOrConnectWithoutCardInput[]
    createMany?: StudySessionCreateManyCardInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type UserCardUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<UserCardCreateWithoutCardInput, UserCardUncheckedCreateWithoutCardInput> | UserCardCreateWithoutCardInput[] | UserCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutCardInput | UserCardCreateOrConnectWithoutCardInput[]
    createMany?: UserCardCreateManyCardInputEnvelope
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
  }

  export type StudySessionUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<StudySessionCreateWithoutCardInput, StudySessionUncheckedCreateWithoutCardInput> | StudySessionCreateWithoutCardInput[] | StudySessionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutCardInput | StudySessionCreateOrConnectWithoutCardInput[]
    createMany?: StudySessionCreateManyCardInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubtopicUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<SubtopicCreateWithoutCardsInput, SubtopicUncheckedCreateWithoutCardsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutCardsInput
    upsert?: SubtopicUpsertWithoutCardsInput
    connect?: SubtopicWhereUniqueInput
    update?: XOR<XOR<SubtopicUpdateToOneWithWhereWithoutCardsInput, SubtopicUpdateWithoutCardsInput>, SubtopicUncheckedUpdateWithoutCardsInput>
  }

  export type UserUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardsInput
    upsert?: UserUpsertWithoutCardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCardsInput, UserUpdateWithoutCardsInput>, UserUncheckedUpdateWithoutCardsInput>
  }

  export type UserCardUpdateManyWithoutCardNestedInput = {
    create?: XOR<UserCardCreateWithoutCardInput, UserCardUncheckedCreateWithoutCardInput> | UserCardCreateWithoutCardInput[] | UserCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutCardInput | UserCardCreateOrConnectWithoutCardInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutCardInput | UserCardUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: UserCardCreateManyCardInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutCardInput | UserCardUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutCardInput | UserCardUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type StudySessionUpdateManyWithoutCardNestedInput = {
    create?: XOR<StudySessionCreateWithoutCardInput, StudySessionUncheckedCreateWithoutCardInput> | StudySessionCreateWithoutCardInput[] | StudySessionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutCardInput | StudySessionCreateOrConnectWithoutCardInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutCardInput | StudySessionUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: StudySessionCreateManyCardInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutCardInput | StudySessionUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutCardInput | StudySessionUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type UserCardUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<UserCardCreateWithoutCardInput, UserCardUncheckedCreateWithoutCardInput> | UserCardCreateWithoutCardInput[] | UserCardUncheckedCreateWithoutCardInput[]
    connectOrCreate?: UserCardCreateOrConnectWithoutCardInput | UserCardCreateOrConnectWithoutCardInput[]
    upsert?: UserCardUpsertWithWhereUniqueWithoutCardInput | UserCardUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: UserCardCreateManyCardInputEnvelope
    set?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    disconnect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    delete?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    connect?: UserCardWhereUniqueInput | UserCardWhereUniqueInput[]
    update?: UserCardUpdateWithWhereUniqueWithoutCardInput | UserCardUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: UserCardUpdateManyWithWhereWithoutCardInput | UserCardUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
  }

  export type StudySessionUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<StudySessionCreateWithoutCardInput, StudySessionUncheckedCreateWithoutCardInput> | StudySessionCreateWithoutCardInput[] | StudySessionUncheckedCreateWithoutCardInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutCardInput | StudySessionCreateOrConnectWithoutCardInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutCardInput | StudySessionUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: StudySessionCreateManyCardInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutCardInput | StudySessionUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutCardInput | StudySessionUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserCardsInput = {
    create?: XOR<UserCreateWithoutUserCardsInput, UserUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCardsInput
    connect?: UserWhereUniqueInput
  }

  export type CardCreateNestedOneWithoutUserCardsInput = {
    create?: XOR<CardCreateWithoutUserCardsInput, CardUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: CardCreateOrConnectWithoutUserCardsInput
    connect?: CardWhereUniqueInput
  }

  export type ContestCreateNestedOneWithoutUserCardsInput = {
    create?: XOR<ContestCreateWithoutUserCardsInput, ContestUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: ContestCreateOrConnectWithoutUserCardsInput
    connect?: ContestWhereUniqueInput
  }

  export type SubtopicCreateNestedOneWithoutUserCardsInput = {
    create?: XOR<SubtopicCreateWithoutUserCardsInput, SubtopicUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutUserCardsInput
    connect?: SubtopicWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserCardsNestedInput = {
    create?: XOR<UserCreateWithoutUserCardsInput, UserUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserCardsInput
    upsert?: UserUpsertWithoutUserCardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserCardsInput, UserUpdateWithoutUserCardsInput>, UserUncheckedUpdateWithoutUserCardsInput>
  }

  export type CardUpdateOneRequiredWithoutUserCardsNestedInput = {
    create?: XOR<CardCreateWithoutUserCardsInput, CardUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: CardCreateOrConnectWithoutUserCardsInput
    upsert?: CardUpsertWithoutUserCardsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutUserCardsInput, CardUpdateWithoutUserCardsInput>, CardUncheckedUpdateWithoutUserCardsInput>
  }

  export type ContestUpdateOneRequiredWithoutUserCardsNestedInput = {
    create?: XOR<ContestCreateWithoutUserCardsInput, ContestUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: ContestCreateOrConnectWithoutUserCardsInput
    upsert?: ContestUpsertWithoutUserCardsInput
    connect?: ContestWhereUniqueInput
    update?: XOR<XOR<ContestUpdateToOneWithWhereWithoutUserCardsInput, ContestUpdateWithoutUserCardsInput>, ContestUncheckedUpdateWithoutUserCardsInput>
  }

  export type SubtopicUpdateOneWithoutUserCardsNestedInput = {
    create?: XOR<SubtopicCreateWithoutUserCardsInput, SubtopicUncheckedCreateWithoutUserCardsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutUserCardsInput
    upsert?: SubtopicUpsertWithoutUserCardsInput
    disconnect?: SubtopicWhereInput | boolean
    delete?: SubtopicWhereInput | boolean
    connect?: SubtopicWhereUniqueInput
    update?: XOR<XOR<SubtopicUpdateToOneWithWhereWithoutUserCardsInput, SubtopicUpdateWithoutUserCardsInput>, SubtopicUncheckedUpdateWithoutUserCardsInput>
  }

  export type ContestCreateNestedOneWithoutContestTopicsInput = {
    create?: XOR<ContestCreateWithoutContestTopicsInput, ContestUncheckedCreateWithoutContestTopicsInput>
    connectOrCreate?: ContestCreateOrConnectWithoutContestTopicsInput
    connect?: ContestWhereUniqueInput
  }

  export type TopicCreateNestedOneWithoutContestTopicsInput = {
    create?: XOR<TopicCreateWithoutContestTopicsInput, TopicUncheckedCreateWithoutContestTopicsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutContestTopicsInput
    connect?: TopicWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutContestTopicsInput = {
    create?: XOR<UserCreateWithoutContestTopicsInput, UserUncheckedCreateWithoutContestTopicsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContestTopicsInput
    connect?: UserWhereUniqueInput
  }

  export type ContestUpdateOneRequiredWithoutContestTopicsNestedInput = {
    create?: XOR<ContestCreateWithoutContestTopicsInput, ContestUncheckedCreateWithoutContestTopicsInput>
    connectOrCreate?: ContestCreateOrConnectWithoutContestTopicsInput
    upsert?: ContestUpsertWithoutContestTopicsInput
    connect?: ContestWhereUniqueInput
    update?: XOR<XOR<ContestUpdateToOneWithWhereWithoutContestTopicsInput, ContestUpdateWithoutContestTopicsInput>, ContestUncheckedUpdateWithoutContestTopicsInput>
  }

  export type TopicUpdateOneRequiredWithoutContestTopicsNestedInput = {
    create?: XOR<TopicCreateWithoutContestTopicsInput, TopicUncheckedCreateWithoutContestTopicsInput>
    connectOrCreate?: TopicCreateOrConnectWithoutContestTopicsInput
    upsert?: TopicUpsertWithoutContestTopicsInput
    connect?: TopicWhereUniqueInput
    update?: XOR<XOR<TopicUpdateToOneWithWhereWithoutContestTopicsInput, TopicUpdateWithoutContestTopicsInput>, TopicUncheckedUpdateWithoutContestTopicsInput>
  }

  export type UserUpdateOneRequiredWithoutContestTopicsNestedInput = {
    create?: XOR<UserCreateWithoutContestTopicsInput, UserUncheckedCreateWithoutContestTopicsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContestTopicsInput
    upsert?: UserUpsertWithoutContestTopicsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContestTopicsInput, UserUpdateWithoutContestTopicsInput>, UserUncheckedUpdateWithoutContestTopicsInput>
  }

  export type UserCreateNestedOneWithoutStudySessionsInput = {
    create?: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudySessionsInput
    connect?: UserWhereUniqueInput
  }

  export type CardCreateNestedOneWithoutStudySessionsInput = {
    create?: XOR<CardCreateWithoutStudySessionsInput, CardUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: CardCreateOrConnectWithoutStudySessionsInput
    connect?: CardWhereUniqueInput
  }

  export type ContestCreateNestedOneWithoutStudySessionsInput = {
    create?: XOR<ContestCreateWithoutStudySessionsInput, ContestUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: ContestCreateOrConnectWithoutStudySessionsInput
    connect?: ContestWhereUniqueInput
  }

  export type SubtopicCreateNestedOneWithoutStudySessionsInput = {
    create?: XOR<SubtopicCreateWithoutStudySessionsInput, SubtopicUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutStudySessionsInput
    connect?: SubtopicWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStudySessionsNestedInput = {
    create?: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudySessionsInput
    upsert?: UserUpsertWithoutStudySessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudySessionsInput, UserUpdateWithoutStudySessionsInput>, UserUncheckedUpdateWithoutStudySessionsInput>
  }

  export type CardUpdateOneRequiredWithoutStudySessionsNestedInput = {
    create?: XOR<CardCreateWithoutStudySessionsInput, CardUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: CardCreateOrConnectWithoutStudySessionsInput
    upsert?: CardUpsertWithoutStudySessionsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutStudySessionsInput, CardUpdateWithoutStudySessionsInput>, CardUncheckedUpdateWithoutStudySessionsInput>
  }

  export type ContestUpdateOneRequiredWithoutStudySessionsNestedInput = {
    create?: XOR<ContestCreateWithoutStudySessionsInput, ContestUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: ContestCreateOrConnectWithoutStudySessionsInput
    upsert?: ContestUpsertWithoutStudySessionsInput
    connect?: ContestWhereUniqueInput
    update?: XOR<XOR<ContestUpdateToOneWithWhereWithoutStudySessionsInput, ContestUpdateWithoutStudySessionsInput>, ContestUncheckedUpdateWithoutStudySessionsInput>
  }

  export type SubtopicUpdateOneWithoutStudySessionsNestedInput = {
    create?: XOR<SubtopicCreateWithoutStudySessionsInput, SubtopicUncheckedCreateWithoutStudySessionsInput>
    connectOrCreate?: SubtopicCreateOrConnectWithoutStudySessionsInput
    upsert?: SubtopicUpsertWithoutStudySessionsInput
    disconnect?: SubtopicWhereInput | boolean
    delete?: SubtopicWhereInput | boolean
    connect?: SubtopicWhereUniqueInput
    update?: XOR<XOR<SubtopicUpdateToOneWithWhereWithoutStudySessionsInput, SubtopicUpdateWithoutStudySessionsInput>, SubtopicUncheckedUpdateWithoutStudySessionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ContestCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contestTopics?: ContestTopicCreateNestedManyWithoutContestInput
    userCards?: UserCardCreateNestedManyWithoutContestInput
    studySessions?: StudySessionCreateNestedManyWithoutContestInput
  }

  export type ContestUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutContestInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutContestInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutContestInput
  }

  export type ContestCreateOrConnectWithoutUserInput = {
    where: ContestWhereUniqueInput
    create: XOR<ContestCreateWithoutUserInput, ContestUncheckedCreateWithoutUserInput>
  }

  export type ContestCreateManyUserInputEnvelope = {
    data: ContestCreateManyUserInput | ContestCreateManyUserInput[]
  }

  export type CardCreateWithoutCreatorInput = {
    id?: string
    front: string
    back: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopic: SubtopicCreateNestedOneWithoutCardsInput
    userCards?: UserCardCreateNestedManyWithoutCardInput
    studySessions?: StudySessionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutCreatorInput = {
    id?: string
    subtopicId: string
    front: string
    back: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userCards?: UserCardUncheckedCreateNestedManyWithoutCardInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutCreatorInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput>
  }

  export type CardCreateManyCreatorInputEnvelope = {
    data: CardCreateManyCreatorInput | CardCreateManyCreatorInput[]
  }

  export type UserCardCreateWithoutUserInput = {
    id?: string
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    card: CardCreateNestedOneWithoutUserCardsInput
    contest: ContestCreateNestedOneWithoutUserCardsInput
    subtopic?: SubtopicCreateNestedOneWithoutUserCardsInput
  }

  export type UserCardUncheckedCreateWithoutUserInput = {
    id?: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardCreateOrConnectWithoutUserInput = {
    where: UserCardWhereUniqueInput
    create: XOR<UserCardCreateWithoutUserInput, UserCardUncheckedCreateWithoutUserInput>
  }

  export type UserCardCreateManyUserInputEnvelope = {
    data: UserCardCreateManyUserInput | UserCardCreateManyUserInput[]
  }

  export type ContestTopicCreateWithoutUserInput = {
    id?: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contest: ContestCreateNestedOneWithoutContestTopicsInput
    topic: TopicCreateNestedOneWithoutContestTopicsInput
  }

  export type ContestTopicUncheckedCreateWithoutUserInput = {
    id?: string
    contestId: string
    topicId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestTopicCreateOrConnectWithoutUserInput = {
    where: ContestTopicWhereUniqueInput
    create: XOR<ContestTopicCreateWithoutUserInput, ContestTopicUncheckedCreateWithoutUserInput>
  }

  export type ContestTopicCreateManyUserInputEnvelope = {
    data: ContestTopicCreateManyUserInput | ContestTopicCreateManyUserInput[]
  }

  export type StudySessionCreateWithoutUserInput = {
    id?: string
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutStudySessionsInput
    contest: ContestCreateNestedOneWithoutStudySessionsInput
    subtopic?: SubtopicCreateNestedOneWithoutStudySessionsInput
  }

  export type StudySessionUncheckedCreateWithoutUserInput = {
    id?: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type StudySessionCreateOrConnectWithoutUserInput = {
    where: StudySessionWhereUniqueInput
    create: XOR<StudySessionCreateWithoutUserInput, StudySessionUncheckedCreateWithoutUserInput>
  }

  export type StudySessionCreateManyUserInputEnvelope = {
    data: StudySessionCreateManyUserInput | StudySessionCreateManyUserInput[]
  }

  export type ContestUpsertWithWhereUniqueWithoutUserInput = {
    where: ContestWhereUniqueInput
    update: XOR<ContestUpdateWithoutUserInput, ContestUncheckedUpdateWithoutUserInput>
    create: XOR<ContestCreateWithoutUserInput, ContestUncheckedCreateWithoutUserInput>
  }

  export type ContestUpdateWithWhereUniqueWithoutUserInput = {
    where: ContestWhereUniqueInput
    data: XOR<ContestUpdateWithoutUserInput, ContestUncheckedUpdateWithoutUserInput>
  }

  export type ContestUpdateManyWithWhereWithoutUserInput = {
    where: ContestScalarWhereInput
    data: XOR<ContestUpdateManyMutationInput, ContestUncheckedUpdateManyWithoutUserInput>
  }

  export type ContestScalarWhereInput = {
    AND?: ContestScalarWhereInput | ContestScalarWhereInput[]
    OR?: ContestScalarWhereInput[]
    NOT?: ContestScalarWhereInput | ContestScalarWhereInput[]
    id?: StringFilter<"Contest"> | string
    userId?: StringFilter<"Contest"> | string
    name?: StringFilter<"Contest"> | string
    description?: StringNullableFilter<"Contest"> | string | null
    editalFileId?: StringNullableFilter<"Contest"> | string | null
    parsedEditalData?: StringNullableFilter<"Contest"> | string | null
    processingError?: StringNullableFilter<"Contest"> | string | null
    isProcessing?: BoolFilter<"Contest"> | boolean
    targetDate?: DateTimeNullableFilter<"Contest"> | Date | string | null
    examDate?: StringNullableFilter<"Contest"> | string | null
    selectedOffice?: StringNullableFilter<"Contest"> | string | null
    institution?: StringNullableFilter<"Contest"> | string | null
    position?: StringNullableFilter<"Contest"> | string | null
    noticeStorageId?: StringNullableFilter<"Contest"> | string | null
    createdAt?: DateTimeFilter<"Contest"> | Date | string
    updatedAt?: DateTimeFilter<"Contest"> | Date | string
  }

  export type CardUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutCreatorInput, CardUncheckedUpdateWithoutCreatorInput>
    create: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput>
  }

  export type CardUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutCreatorInput, CardUncheckedUpdateWithoutCreatorInput>
  }

  export type CardUpdateManyWithWhereWithoutCreatorInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutCreatorInput>
  }

  export type CardScalarWhereInput = {
    AND?: CardScalarWhereInput | CardScalarWhereInput[]
    OR?: CardScalarWhereInput[]
    NOT?: CardScalarWhereInput | CardScalarWhereInput[]
    id?: StringFilter<"Card"> | string
    subtopicId?: StringFilter<"Card"> | string
    front?: StringFilter<"Card"> | string
    back?: StringFilter<"Card"> | string
    createdBy?: StringFilter<"Card"> | string
    repetitions?: IntFilter<"Card"> | number
    easeFactor?: FloatFilter<"Card"> | number
    interval?: IntFilter<"Card"> | number
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
  }

  export type UserCardUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCardWhereUniqueInput
    update: XOR<UserCardUpdateWithoutUserInput, UserCardUncheckedUpdateWithoutUserInput>
    create: XOR<UserCardCreateWithoutUserInput, UserCardUncheckedCreateWithoutUserInput>
  }

  export type UserCardUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCardWhereUniqueInput
    data: XOR<UserCardUpdateWithoutUserInput, UserCardUncheckedUpdateWithoutUserInput>
  }

  export type UserCardUpdateManyWithWhereWithoutUserInput = {
    where: UserCardScalarWhereInput
    data: XOR<UserCardUpdateManyMutationInput, UserCardUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCardScalarWhereInput = {
    AND?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
    OR?: UserCardScalarWhereInput[]
    NOT?: UserCardScalarWhereInput | UserCardScalarWhereInput[]
    id?: StringFilter<"UserCard"> | string
    userId?: StringFilter<"UserCard"> | string
    cardId?: StringFilter<"UserCard"> | string
    contestId?: StringFilter<"UserCard"> | string
    subtopicId?: StringNullableFilter<"UserCard"> | string | null
    nextReviewTime?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    repetitions?: IntFilter<"UserCard"> | number
    easeFactor?: FloatFilter<"UserCard"> | number
    interval?: IntFilter<"UserCard"> | number
    lastReviewed?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    totalCorrectReviews?: IntFilter<"UserCard"> | number
    totalIncorrectReviews?: IntFilter<"UserCard"> | number
    nextReview?: DateTimeNullableFilter<"UserCard"> | Date | string | null
    correctStreak?: IntFilter<"UserCard"> | number
    incorrectStreak?: IntFilter<"UserCard"> | number
    status?: StringFilter<"UserCard"> | string
    createdAt?: DateTimeFilter<"UserCard"> | Date | string
    updatedAt?: DateTimeFilter<"UserCard"> | Date | string
  }

  export type ContestTopicUpsertWithWhereUniqueWithoutUserInput = {
    where: ContestTopicWhereUniqueInput
    update: XOR<ContestTopicUpdateWithoutUserInput, ContestTopicUncheckedUpdateWithoutUserInput>
    create: XOR<ContestTopicCreateWithoutUserInput, ContestTopicUncheckedCreateWithoutUserInput>
  }

  export type ContestTopicUpdateWithWhereUniqueWithoutUserInput = {
    where: ContestTopicWhereUniqueInput
    data: XOR<ContestTopicUpdateWithoutUserInput, ContestTopicUncheckedUpdateWithoutUserInput>
  }

  export type ContestTopicUpdateManyWithWhereWithoutUserInput = {
    where: ContestTopicScalarWhereInput
    data: XOR<ContestTopicUpdateManyMutationInput, ContestTopicUncheckedUpdateManyWithoutUserInput>
  }

  export type ContestTopicScalarWhereInput = {
    AND?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
    OR?: ContestTopicScalarWhereInput[]
    NOT?: ContestTopicScalarWhereInput | ContestTopicScalarWhereInput[]
    id?: StringFilter<"ContestTopic"> | string
    contestId?: StringFilter<"ContestTopic"> | string
    topicId?: StringFilter<"ContestTopic"> | string
    userId?: StringFilter<"ContestTopic"> | string
    priority?: IntNullableFilter<"ContestTopic"> | number | null
    createdAt?: DateTimeFilter<"ContestTopic"> | Date | string
    updatedAt?: DateTimeFilter<"ContestTopic"> | Date | string
  }

  export type StudySessionUpsertWithWhereUniqueWithoutUserInput = {
    where: StudySessionWhereUniqueInput
    update: XOR<StudySessionUpdateWithoutUserInput, StudySessionUncheckedUpdateWithoutUserInput>
    create: XOR<StudySessionCreateWithoutUserInput, StudySessionUncheckedCreateWithoutUserInput>
  }

  export type StudySessionUpdateWithWhereUniqueWithoutUserInput = {
    where: StudySessionWhereUniqueInput
    data: XOR<StudySessionUpdateWithoutUserInput, StudySessionUncheckedUpdateWithoutUserInput>
  }

  export type StudySessionUpdateManyWithWhereWithoutUserInput = {
    where: StudySessionScalarWhereInput
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyWithoutUserInput>
  }

  export type StudySessionScalarWhereInput = {
    AND?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
    OR?: StudySessionScalarWhereInput[]
    NOT?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
    id?: StringFilter<"StudySession"> | string
    userId?: StringFilter<"StudySession"> | string
    cardId?: StringFilter<"StudySession"> | string
    contestId?: StringFilter<"StudySession"> | string
    subtopicId?: StringNullableFilter<"StudySession"> | string | null
    reviewTime?: DateTimeFilter<"StudySession"> | Date | string
    quality?: IntFilter<"StudySession"> | number
    easeFactor?: FloatFilter<"StudySession"> | number
    interval?: IntFilter<"StudySession"> | number
    repetitions?: IntFilter<"StudySession"> | number
    correct?: BoolFilter<"StudySession"> | boolean
    createdAt?: DateTimeFilter<"StudySession"> | Date | string
  }

  export type UserCreateWithoutContestsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutCreatorInput
    userCards?: UserCardCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicCreateNestedManyWithoutUserInput
    studySessions?: StudySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContestsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutUserInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContestsInput, UserUncheckedCreateWithoutContestsInput>
  }

  export type ContestTopicCreateWithoutContestInput = {
    id?: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic: TopicCreateNestedOneWithoutContestTopicsInput
    user: UserCreateNestedOneWithoutContestTopicsInput
  }

  export type ContestTopicUncheckedCreateWithoutContestInput = {
    id?: string
    topicId: string
    userId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestTopicCreateOrConnectWithoutContestInput = {
    where: ContestTopicWhereUniqueInput
    create: XOR<ContestTopicCreateWithoutContestInput, ContestTopicUncheckedCreateWithoutContestInput>
  }

  export type ContestTopicCreateManyContestInputEnvelope = {
    data: ContestTopicCreateManyContestInput | ContestTopicCreateManyContestInput[]
  }

  export type UserCardCreateWithoutContestInput = {
    id?: string
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserCardsInput
    card: CardCreateNestedOneWithoutUserCardsInput
    subtopic?: SubtopicCreateNestedOneWithoutUserCardsInput
  }

  export type UserCardUncheckedCreateWithoutContestInput = {
    id?: string
    userId: string
    cardId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardCreateOrConnectWithoutContestInput = {
    where: UserCardWhereUniqueInput
    create: XOR<UserCardCreateWithoutContestInput, UserCardUncheckedCreateWithoutContestInput>
  }

  export type UserCardCreateManyContestInputEnvelope = {
    data: UserCardCreateManyContestInput | UserCardCreateManyContestInput[]
  }

  export type StudySessionCreateWithoutContestInput = {
    id?: string
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStudySessionsInput
    card: CardCreateNestedOneWithoutStudySessionsInput
    subtopic?: SubtopicCreateNestedOneWithoutStudySessionsInput
  }

  export type StudySessionUncheckedCreateWithoutContestInput = {
    id?: string
    userId: string
    cardId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type StudySessionCreateOrConnectWithoutContestInput = {
    where: StudySessionWhereUniqueInput
    create: XOR<StudySessionCreateWithoutContestInput, StudySessionUncheckedCreateWithoutContestInput>
  }

  export type StudySessionCreateManyContestInputEnvelope = {
    data: StudySessionCreateManyContestInput | StudySessionCreateManyContestInput[]
  }

  export type UserUpsertWithoutContestsInput = {
    update: XOR<UserUpdateWithoutContestsInput, UserUncheckedUpdateWithoutContestsInput>
    create: XOR<UserCreateWithoutContestsInput, UserUncheckedCreateWithoutContestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContestsInput, UserUncheckedUpdateWithoutContestsInput>
  }

  export type UserUpdateWithoutContestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ContestTopicUpsertWithWhereUniqueWithoutContestInput = {
    where: ContestTopicWhereUniqueInput
    update: XOR<ContestTopicUpdateWithoutContestInput, ContestTopicUncheckedUpdateWithoutContestInput>
    create: XOR<ContestTopicCreateWithoutContestInput, ContestTopicUncheckedCreateWithoutContestInput>
  }

  export type ContestTopicUpdateWithWhereUniqueWithoutContestInput = {
    where: ContestTopicWhereUniqueInput
    data: XOR<ContestTopicUpdateWithoutContestInput, ContestTopicUncheckedUpdateWithoutContestInput>
  }

  export type ContestTopicUpdateManyWithWhereWithoutContestInput = {
    where: ContestTopicScalarWhereInput
    data: XOR<ContestTopicUpdateManyMutationInput, ContestTopicUncheckedUpdateManyWithoutContestInput>
  }

  export type UserCardUpsertWithWhereUniqueWithoutContestInput = {
    where: UserCardWhereUniqueInput
    update: XOR<UserCardUpdateWithoutContestInput, UserCardUncheckedUpdateWithoutContestInput>
    create: XOR<UserCardCreateWithoutContestInput, UserCardUncheckedCreateWithoutContestInput>
  }

  export type UserCardUpdateWithWhereUniqueWithoutContestInput = {
    where: UserCardWhereUniqueInput
    data: XOR<UserCardUpdateWithoutContestInput, UserCardUncheckedUpdateWithoutContestInput>
  }

  export type UserCardUpdateManyWithWhereWithoutContestInput = {
    where: UserCardScalarWhereInput
    data: XOR<UserCardUpdateManyMutationInput, UserCardUncheckedUpdateManyWithoutContestInput>
  }

  export type StudySessionUpsertWithWhereUniqueWithoutContestInput = {
    where: StudySessionWhereUniqueInput
    update: XOR<StudySessionUpdateWithoutContestInput, StudySessionUncheckedUpdateWithoutContestInput>
    create: XOR<StudySessionCreateWithoutContestInput, StudySessionUncheckedCreateWithoutContestInput>
  }

  export type StudySessionUpdateWithWhereUniqueWithoutContestInput = {
    where: StudySessionWhereUniqueInput
    data: XOR<StudySessionUpdateWithoutContestInput, StudySessionUncheckedUpdateWithoutContestInput>
  }

  export type StudySessionUpdateManyWithWhereWithoutContestInput = {
    where: StudySessionScalarWhereInput
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyWithoutContestInput>
  }

  export type SubtopicCreateWithoutTopicInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardCreateNestedManyWithoutSubtopicInput
    userCards?: UserCardCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUncheckedCreateWithoutTopicInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutSubtopicInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicCreateOrConnectWithoutTopicInput = {
    where: SubtopicWhereUniqueInput
    create: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput>
  }

  export type SubtopicCreateManyTopicInputEnvelope = {
    data: SubtopicCreateManyTopicInput | SubtopicCreateManyTopicInput[]
  }

  export type ContestTopicCreateWithoutTopicInput = {
    id?: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contest: ContestCreateNestedOneWithoutContestTopicsInput
    user: UserCreateNestedOneWithoutContestTopicsInput
  }

  export type ContestTopicUncheckedCreateWithoutTopicInput = {
    id?: string
    contestId: string
    userId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestTopicCreateOrConnectWithoutTopicInput = {
    where: ContestTopicWhereUniqueInput
    create: XOR<ContestTopicCreateWithoutTopicInput, ContestTopicUncheckedCreateWithoutTopicInput>
  }

  export type ContestTopicCreateManyTopicInputEnvelope = {
    data: ContestTopicCreateManyTopicInput | ContestTopicCreateManyTopicInput[]
  }

  export type SubtopicUpsertWithWhereUniqueWithoutTopicInput = {
    where: SubtopicWhereUniqueInput
    update: XOR<SubtopicUpdateWithoutTopicInput, SubtopicUncheckedUpdateWithoutTopicInput>
    create: XOR<SubtopicCreateWithoutTopicInput, SubtopicUncheckedCreateWithoutTopicInput>
  }

  export type SubtopicUpdateWithWhereUniqueWithoutTopicInput = {
    where: SubtopicWhereUniqueInput
    data: XOR<SubtopicUpdateWithoutTopicInput, SubtopicUncheckedUpdateWithoutTopicInput>
  }

  export type SubtopicUpdateManyWithWhereWithoutTopicInput = {
    where: SubtopicScalarWhereInput
    data: XOR<SubtopicUpdateManyMutationInput, SubtopicUncheckedUpdateManyWithoutTopicInput>
  }

  export type SubtopicScalarWhereInput = {
    AND?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
    OR?: SubtopicScalarWhereInput[]
    NOT?: SubtopicScalarWhereInput | SubtopicScalarWhereInput[]
    id?: StringFilter<"Subtopic"> | string
    topicId?: StringFilter<"Subtopic"> | string
    name?: StringFilter<"Subtopic"> | string
    description?: StringNullableFilter<"Subtopic"> | string | null
    priority?: IntNullableFilter<"Subtopic"> | number | null
    estimatedCards?: IntNullableFilter<"Subtopic"> | number | null
    createdAt?: DateTimeFilter<"Subtopic"> | Date | string
    updatedAt?: DateTimeFilter<"Subtopic"> | Date | string
  }

  export type ContestTopicUpsertWithWhereUniqueWithoutTopicInput = {
    where: ContestTopicWhereUniqueInput
    update: XOR<ContestTopicUpdateWithoutTopicInput, ContestTopicUncheckedUpdateWithoutTopicInput>
    create: XOR<ContestTopicCreateWithoutTopicInput, ContestTopicUncheckedCreateWithoutTopicInput>
  }

  export type ContestTopicUpdateWithWhereUniqueWithoutTopicInput = {
    where: ContestTopicWhereUniqueInput
    data: XOR<ContestTopicUpdateWithoutTopicInput, ContestTopicUncheckedUpdateWithoutTopicInput>
  }

  export type ContestTopicUpdateManyWithWhereWithoutTopicInput = {
    where: ContestTopicScalarWhereInput
    data: XOR<ContestTopicUpdateManyMutationInput, ContestTopicUncheckedUpdateManyWithoutTopicInput>
  }

  export type TopicCreateWithoutSubtopicsInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contestTopics?: ContestTopicCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutSubtopicsInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutSubtopicsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
  }

  export type CardCreateWithoutSubtopicInput = {
    id?: string
    front: string
    back: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCardsInput
    userCards?: UserCardCreateNestedManyWithoutCardInput
    studySessions?: StudySessionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutSubtopicInput = {
    id?: string
    front: string
    back: string
    createdBy: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userCards?: UserCardUncheckedCreateNestedManyWithoutCardInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutSubtopicInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutSubtopicInput, CardUncheckedCreateWithoutSubtopicInput>
  }

  export type CardCreateManySubtopicInputEnvelope = {
    data: CardCreateManySubtopicInput | CardCreateManySubtopicInput[]
  }

  export type UserCardCreateWithoutSubtopicInput = {
    id?: string
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserCardsInput
    card: CardCreateNestedOneWithoutUserCardsInput
    contest: ContestCreateNestedOneWithoutUserCardsInput
  }

  export type UserCardUncheckedCreateWithoutSubtopicInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardCreateOrConnectWithoutSubtopicInput = {
    where: UserCardWhereUniqueInput
    create: XOR<UserCardCreateWithoutSubtopicInput, UserCardUncheckedCreateWithoutSubtopicInput>
  }

  export type UserCardCreateManySubtopicInputEnvelope = {
    data: UserCardCreateManySubtopicInput | UserCardCreateManySubtopicInput[]
  }

  export type StudySessionCreateWithoutSubtopicInput = {
    id?: string
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStudySessionsInput
    card: CardCreateNestedOneWithoutStudySessionsInput
    contest: ContestCreateNestedOneWithoutStudySessionsInput
  }

  export type StudySessionUncheckedCreateWithoutSubtopicInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type StudySessionCreateOrConnectWithoutSubtopicInput = {
    where: StudySessionWhereUniqueInput
    create: XOR<StudySessionCreateWithoutSubtopicInput, StudySessionUncheckedCreateWithoutSubtopicInput>
  }

  export type StudySessionCreateManySubtopicInputEnvelope = {
    data: StudySessionCreateManySubtopicInput | StudySessionCreateManySubtopicInput[]
  }

  export type TopicUpsertWithoutSubtopicsInput = {
    update: XOR<TopicUpdateWithoutSubtopicsInput, TopicUncheckedUpdateWithoutSubtopicsInput>
    create: XOR<TopicCreateWithoutSubtopicsInput, TopicUncheckedCreateWithoutSubtopicsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutSubtopicsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutSubtopicsInput, TopicUncheckedUpdateWithoutSubtopicsInput>
  }

  export type TopicUpdateWithoutSubtopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contestTopics?: ContestTopicUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutSubtopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type CardUpsertWithWhereUniqueWithoutSubtopicInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutSubtopicInput, CardUncheckedUpdateWithoutSubtopicInput>
    create: XOR<CardCreateWithoutSubtopicInput, CardUncheckedCreateWithoutSubtopicInput>
  }

  export type CardUpdateWithWhereUniqueWithoutSubtopicInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutSubtopicInput, CardUncheckedUpdateWithoutSubtopicInput>
  }

  export type CardUpdateManyWithWhereWithoutSubtopicInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutSubtopicInput>
  }

  export type UserCardUpsertWithWhereUniqueWithoutSubtopicInput = {
    where: UserCardWhereUniqueInput
    update: XOR<UserCardUpdateWithoutSubtopicInput, UserCardUncheckedUpdateWithoutSubtopicInput>
    create: XOR<UserCardCreateWithoutSubtopicInput, UserCardUncheckedCreateWithoutSubtopicInput>
  }

  export type UserCardUpdateWithWhereUniqueWithoutSubtopicInput = {
    where: UserCardWhereUniqueInput
    data: XOR<UserCardUpdateWithoutSubtopicInput, UserCardUncheckedUpdateWithoutSubtopicInput>
  }

  export type UserCardUpdateManyWithWhereWithoutSubtopicInput = {
    where: UserCardScalarWhereInput
    data: XOR<UserCardUpdateManyMutationInput, UserCardUncheckedUpdateManyWithoutSubtopicInput>
  }

  export type StudySessionUpsertWithWhereUniqueWithoutSubtopicInput = {
    where: StudySessionWhereUniqueInput
    update: XOR<StudySessionUpdateWithoutSubtopicInput, StudySessionUncheckedUpdateWithoutSubtopicInput>
    create: XOR<StudySessionCreateWithoutSubtopicInput, StudySessionUncheckedCreateWithoutSubtopicInput>
  }

  export type StudySessionUpdateWithWhereUniqueWithoutSubtopicInput = {
    where: StudySessionWhereUniqueInput
    data: XOR<StudySessionUpdateWithoutSubtopicInput, StudySessionUncheckedUpdateWithoutSubtopicInput>
  }

  export type StudySessionUpdateManyWithWhereWithoutSubtopicInput = {
    where: StudySessionScalarWhereInput
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyWithoutSubtopicInput>
  }

  export type SubtopicCreateWithoutCardsInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic: TopicCreateNestedOneWithoutSubtopicsInput
    userCards?: UserCardCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUncheckedCreateWithoutCardsInput = {
    id?: string
    topicId: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userCards?: UserCardUncheckedCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicCreateOrConnectWithoutCardsInput = {
    where: SubtopicWhereUniqueInput
    create: XOR<SubtopicCreateWithoutCardsInput, SubtopicUncheckedCreateWithoutCardsInput>
  }

  export type UserCreateWithoutCardsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestCreateNestedManyWithoutUserInput
    userCards?: UserCardCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicCreateNestedManyWithoutUserInput
    studySessions?: StudySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCardsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestUncheckedCreateNestedManyWithoutUserInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutUserInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
  }

  export type UserCardCreateWithoutCardInput = {
    id?: string
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserCardsInput
    contest: ContestCreateNestedOneWithoutUserCardsInput
    subtopic?: SubtopicCreateNestedOneWithoutUserCardsInput
  }

  export type UserCardUncheckedCreateWithoutCardInput = {
    id?: string
    userId: string
    contestId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardCreateOrConnectWithoutCardInput = {
    where: UserCardWhereUniqueInput
    create: XOR<UserCardCreateWithoutCardInput, UserCardUncheckedCreateWithoutCardInput>
  }

  export type UserCardCreateManyCardInputEnvelope = {
    data: UserCardCreateManyCardInput | UserCardCreateManyCardInput[]
  }

  export type StudySessionCreateWithoutCardInput = {
    id?: string
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStudySessionsInput
    contest: ContestCreateNestedOneWithoutStudySessionsInput
    subtopic?: SubtopicCreateNestedOneWithoutStudySessionsInput
  }

  export type StudySessionUncheckedCreateWithoutCardInput = {
    id?: string
    userId: string
    contestId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type StudySessionCreateOrConnectWithoutCardInput = {
    where: StudySessionWhereUniqueInput
    create: XOR<StudySessionCreateWithoutCardInput, StudySessionUncheckedCreateWithoutCardInput>
  }

  export type StudySessionCreateManyCardInputEnvelope = {
    data: StudySessionCreateManyCardInput | StudySessionCreateManyCardInput[]
  }

  export type SubtopicUpsertWithoutCardsInput = {
    update: XOR<SubtopicUpdateWithoutCardsInput, SubtopicUncheckedUpdateWithoutCardsInput>
    create: XOR<SubtopicCreateWithoutCardsInput, SubtopicUncheckedCreateWithoutCardsInput>
    where?: SubtopicWhereInput
  }

  export type SubtopicUpdateToOneWithWhereWithoutCardsInput = {
    where?: SubtopicWhereInput
    data: XOR<SubtopicUpdateWithoutCardsInput, SubtopicUncheckedUpdateWithoutCardsInput>
  }

  export type SubtopicUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutSubtopicsNestedInput
    userCards?: UserCardUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCards?: UserCardUncheckedUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutSubtopicNestedInput
  }

  export type UserUpsertWithoutCardsInput = {
    update: XOR<UserUpdateWithoutCardsInput, UserUncheckedUpdateWithoutCardsInput>
    create: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCardsInput, UserUncheckedUpdateWithoutCardsInput>
  }

  export type UserUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUpdateManyWithoutUserNestedInput
    userCards?: UserCardUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUncheckedUpdateManyWithoutUserNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCardUpsertWithWhereUniqueWithoutCardInput = {
    where: UserCardWhereUniqueInput
    update: XOR<UserCardUpdateWithoutCardInput, UserCardUncheckedUpdateWithoutCardInput>
    create: XOR<UserCardCreateWithoutCardInput, UserCardUncheckedCreateWithoutCardInput>
  }

  export type UserCardUpdateWithWhereUniqueWithoutCardInput = {
    where: UserCardWhereUniqueInput
    data: XOR<UserCardUpdateWithoutCardInput, UserCardUncheckedUpdateWithoutCardInput>
  }

  export type UserCardUpdateManyWithWhereWithoutCardInput = {
    where: UserCardScalarWhereInput
    data: XOR<UserCardUpdateManyMutationInput, UserCardUncheckedUpdateManyWithoutCardInput>
  }

  export type StudySessionUpsertWithWhereUniqueWithoutCardInput = {
    where: StudySessionWhereUniqueInput
    update: XOR<StudySessionUpdateWithoutCardInput, StudySessionUncheckedUpdateWithoutCardInput>
    create: XOR<StudySessionCreateWithoutCardInput, StudySessionUncheckedCreateWithoutCardInput>
  }

  export type StudySessionUpdateWithWhereUniqueWithoutCardInput = {
    where: StudySessionWhereUniqueInput
    data: XOR<StudySessionUpdateWithoutCardInput, StudySessionUncheckedUpdateWithoutCardInput>
  }

  export type StudySessionUpdateManyWithWhereWithoutCardInput = {
    where: StudySessionScalarWhereInput
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyWithoutCardInput>
  }

  export type UserCreateWithoutUserCardsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    contestTopics?: ContestTopicCreateNestedManyWithoutUserInput
    studySessions?: StudySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserCardsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutUserInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserCardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserCardsInput, UserUncheckedCreateWithoutUserCardsInput>
  }

  export type CardCreateWithoutUserCardsInput = {
    id?: string
    front: string
    back: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopic: SubtopicCreateNestedOneWithoutCardsInput
    creator: UserCreateNestedOneWithoutCardsInput
    studySessions?: StudySessionCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutUserCardsInput = {
    id?: string
    subtopicId: string
    front: string
    back: string
    createdBy: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutUserCardsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutUserCardsInput, CardUncheckedCreateWithoutUserCardsInput>
  }

  export type ContestCreateWithoutUserCardsInput = {
    id?: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutContestsInput
    contestTopics?: ContestTopicCreateNestedManyWithoutContestInput
    studySessions?: StudySessionCreateNestedManyWithoutContestInput
  }

  export type ContestUncheckedCreateWithoutUserCardsInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutContestInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutContestInput
  }

  export type ContestCreateOrConnectWithoutUserCardsInput = {
    where: ContestWhereUniqueInput
    create: XOR<ContestCreateWithoutUserCardsInput, ContestUncheckedCreateWithoutUserCardsInput>
  }

  export type SubtopicCreateWithoutUserCardsInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic: TopicCreateNestedOneWithoutSubtopicsInput
    cards?: CardCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUncheckedCreateWithoutUserCardsInput = {
    id?: string
    topicId: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutSubtopicInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicCreateOrConnectWithoutUserCardsInput = {
    where: SubtopicWhereUniqueInput
    create: XOR<SubtopicCreateWithoutUserCardsInput, SubtopicUncheckedCreateWithoutUserCardsInput>
  }

  export type UserUpsertWithoutUserCardsInput = {
    update: XOR<UserUpdateWithoutUserCardsInput, UserUncheckedUpdateWithoutUserCardsInput>
    create: XOR<UserCreateWithoutUserCardsInput, UserUncheckedCreateWithoutUserCardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserCardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserCardsInput, UserUncheckedUpdateWithoutUserCardsInput>
  }

  export type UserUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CardUpsertWithoutUserCardsInput = {
    update: XOR<CardUpdateWithoutUserCardsInput, CardUncheckedUpdateWithoutUserCardsInput>
    create: XOR<CardCreateWithoutUserCardsInput, CardUncheckedCreateWithoutUserCardsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutUserCardsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutUserCardsInput, CardUncheckedUpdateWithoutUserCardsInput>
  }

  export type CardUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopic?: SubtopicUpdateOneRequiredWithoutCardsNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    studySessions?: StudySessionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subtopicId?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studySessions?: StudySessionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type ContestUpsertWithoutUserCardsInput = {
    update: XOR<ContestUpdateWithoutUserCardsInput, ContestUncheckedUpdateWithoutUserCardsInput>
    create: XOR<ContestCreateWithoutUserCardsInput, ContestUncheckedCreateWithoutUserCardsInput>
    where?: ContestWhereInput
  }

  export type ContestUpdateToOneWithWhereWithoutUserCardsInput = {
    where?: ContestWhereInput
    data: XOR<ContestUpdateWithoutUserCardsInput, ContestUncheckedUpdateWithoutUserCardsInput>
  }

  export type ContestUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutContestsNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUpdateManyWithoutContestNestedInput
  }

  export type ContestUncheckedUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutContestNestedInput
  }

  export type SubtopicUpsertWithoutUserCardsInput = {
    update: XOR<SubtopicUpdateWithoutUserCardsInput, SubtopicUncheckedUpdateWithoutUserCardsInput>
    create: XOR<SubtopicCreateWithoutUserCardsInput, SubtopicUncheckedCreateWithoutUserCardsInput>
    where?: SubtopicWhereInput
  }

  export type SubtopicUpdateToOneWithWhereWithoutUserCardsInput = {
    where?: SubtopicWhereInput
    data: XOR<SubtopicUpdateWithoutUserCardsInput, SubtopicUncheckedUpdateWithoutUserCardsInput>
  }

  export type SubtopicUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutSubtopicsNestedInput
    cards?: CardUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateWithoutUserCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutSubtopicNestedInput
  }

  export type ContestCreateWithoutContestTopicsInput = {
    id?: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutContestsInput
    userCards?: UserCardCreateNestedManyWithoutContestInput
    studySessions?: StudySessionCreateNestedManyWithoutContestInput
  }

  export type ContestUncheckedCreateWithoutContestTopicsInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userCards?: UserCardUncheckedCreateNestedManyWithoutContestInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutContestInput
  }

  export type ContestCreateOrConnectWithoutContestTopicsInput = {
    where: ContestWhereUniqueInput
    create: XOR<ContestCreateWithoutContestTopicsInput, ContestUncheckedCreateWithoutContestTopicsInput>
  }

  export type TopicCreateWithoutContestTopicsInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicCreateNestedManyWithoutTopicInput
  }

  export type TopicUncheckedCreateWithoutContestTopicsInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopics?: SubtopicUncheckedCreateNestedManyWithoutTopicInput
  }

  export type TopicCreateOrConnectWithoutContestTopicsInput = {
    where: TopicWhereUniqueInput
    create: XOR<TopicCreateWithoutContestTopicsInput, TopicUncheckedCreateWithoutContestTopicsInput>
  }

  export type UserCreateWithoutContestTopicsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    userCards?: UserCardCreateNestedManyWithoutUserInput
    studySessions?: StudySessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutContestTopicsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutUserInput
    studySessions?: StudySessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutContestTopicsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContestTopicsInput, UserUncheckedCreateWithoutContestTopicsInput>
  }

  export type ContestUpsertWithoutContestTopicsInput = {
    update: XOR<ContestUpdateWithoutContestTopicsInput, ContestUncheckedUpdateWithoutContestTopicsInput>
    create: XOR<ContestCreateWithoutContestTopicsInput, ContestUncheckedCreateWithoutContestTopicsInput>
    where?: ContestWhereInput
  }

  export type ContestUpdateToOneWithWhereWithoutContestTopicsInput = {
    where?: ContestWhereInput
    data: XOR<ContestUpdateWithoutContestTopicsInput, ContestUncheckedUpdateWithoutContestTopicsInput>
  }

  export type ContestUpdateWithoutContestTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutContestsNestedInput
    userCards?: UserCardUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUpdateManyWithoutContestNestedInput
  }

  export type ContestUncheckedUpdateWithoutContestTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCards?: UserCardUncheckedUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutContestNestedInput
  }

  export type TopicUpsertWithoutContestTopicsInput = {
    update: XOR<TopicUpdateWithoutContestTopicsInput, TopicUncheckedUpdateWithoutContestTopicsInput>
    create: XOR<TopicCreateWithoutContestTopicsInput, TopicUncheckedCreateWithoutContestTopicsInput>
    where?: TopicWhereInput
  }

  export type TopicUpdateToOneWithWhereWithoutContestTopicsInput = {
    where?: TopicWhereInput
    data: XOR<TopicUpdateWithoutContestTopicsInput, TopicUncheckedUpdateWithoutContestTopicsInput>
  }

  export type TopicUpdateWithoutContestTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUpdateManyWithoutTopicNestedInput
  }

  export type TopicUncheckedUpdateWithoutContestTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopics?: SubtopicUncheckedUpdateManyWithoutTopicNestedInput
  }

  export type UserUpsertWithoutContestTopicsInput = {
    update: XOR<UserUpdateWithoutContestTopicsInput, UserUncheckedUpdateWithoutContestTopicsInput>
    create: XOR<UserCreateWithoutContestTopicsInput, UserUncheckedCreateWithoutContestTopicsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContestTopicsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContestTopicsInput, UserUncheckedUpdateWithoutContestTopicsInput>
  }

  export type UserUpdateWithoutContestTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutContestTopicsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutUserNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStudySessionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    userCards?: UserCardCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudySessionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    subscriptionTier?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contests?: ContestUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutUserInput
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudySessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
  }

  export type CardCreateWithoutStudySessionsInput = {
    id?: string
    front: string
    back: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subtopic: SubtopicCreateNestedOneWithoutCardsInput
    creator: UserCreateNestedOneWithoutCardsInput
    userCards?: UserCardCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutStudySessionsInput = {
    id?: string
    subtopicId: string
    front: string
    back: string
    createdBy: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userCards?: UserCardUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutStudySessionsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutStudySessionsInput, CardUncheckedCreateWithoutStudySessionsInput>
  }

  export type ContestCreateWithoutStudySessionsInput = {
    id?: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutContestsInput
    contestTopics?: ContestTopicCreateNestedManyWithoutContestInput
    userCards?: UserCardCreateNestedManyWithoutContestInput
  }

  export type ContestUncheckedCreateWithoutStudySessionsInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contestTopics?: ContestTopicUncheckedCreateNestedManyWithoutContestInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutContestInput
  }

  export type ContestCreateOrConnectWithoutStudySessionsInput = {
    where: ContestWhereUniqueInput
    create: XOR<ContestCreateWithoutStudySessionsInput, ContestUncheckedCreateWithoutStudySessionsInput>
  }

  export type SubtopicCreateWithoutStudySessionsInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    topic: TopicCreateNestedOneWithoutSubtopicsInput
    cards?: CardCreateNestedManyWithoutSubtopicInput
    userCards?: UserCardCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicUncheckedCreateWithoutStudySessionsInput = {
    id?: string
    topicId: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cards?: CardUncheckedCreateNestedManyWithoutSubtopicInput
    userCards?: UserCardUncheckedCreateNestedManyWithoutSubtopicInput
  }

  export type SubtopicCreateOrConnectWithoutStudySessionsInput = {
    where: SubtopicWhereUniqueInput
    create: XOR<SubtopicCreateWithoutStudySessionsInput, SubtopicUncheckedCreateWithoutStudySessionsInput>
  }

  export type UserUpsertWithoutStudySessionsInput = {
    update: XOR<UserUpdateWithoutStudySessionsInput, UserUncheckedUpdateWithoutStudySessionsInput>
    create: XOR<UserCreateWithoutStudySessionsInput, UserUncheckedCreateWithoutStudySessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudySessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudySessionsInput, UserUncheckedUpdateWithoutStudySessionsInput>
  }

  export type UserUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    subscriptionTier?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contests?: ContestUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutUserNestedInput
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CardUpsertWithoutStudySessionsInput = {
    update: XOR<CardUpdateWithoutStudySessionsInput, CardUncheckedUpdateWithoutStudySessionsInput>
    create: XOR<CardCreateWithoutStudySessionsInput, CardUncheckedCreateWithoutStudySessionsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutStudySessionsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutStudySessionsInput, CardUncheckedUpdateWithoutStudySessionsInput>
  }

  export type CardUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopic?: SubtopicUpdateOneRequiredWithoutCardsNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    userCards?: UserCardUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subtopicId?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCards?: UserCardUncheckedUpdateManyWithoutCardNestedInput
  }

  export type ContestUpsertWithoutStudySessionsInput = {
    update: XOR<ContestUpdateWithoutStudySessionsInput, ContestUncheckedUpdateWithoutStudySessionsInput>
    create: XOR<ContestCreateWithoutStudySessionsInput, ContestUncheckedCreateWithoutStudySessionsInput>
    where?: ContestWhereInput
  }

  export type ContestUpdateToOneWithWhereWithoutStudySessionsInput = {
    where?: ContestWhereInput
    data: XOR<ContestUpdateWithoutStudySessionsInput, ContestUncheckedUpdateWithoutStudySessionsInput>
  }

  export type ContestUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutContestsNestedInput
    contestTopics?: ContestTopicUpdateManyWithoutContestNestedInput
    userCards?: UserCardUpdateManyWithoutContestNestedInput
  }

  export type ContestUncheckedUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutContestNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutContestNestedInput
  }

  export type SubtopicUpsertWithoutStudySessionsInput = {
    update: XOR<SubtopicUpdateWithoutStudySessionsInput, SubtopicUncheckedUpdateWithoutStudySessionsInput>
    create: XOR<SubtopicCreateWithoutStudySessionsInput, SubtopicUncheckedCreateWithoutStudySessionsInput>
    where?: SubtopicWhereInput
  }

  export type SubtopicUpdateToOneWithWhereWithoutStudySessionsInput = {
    where?: SubtopicWhereInput
    data: XOR<SubtopicUpdateWithoutStudySessionsInput, SubtopicUncheckedUpdateWithoutStudySessionsInput>
  }

  export type SubtopicUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutSubtopicsNestedInput
    cards?: CardUpdateManyWithoutSubtopicNestedInput
    userCards?: UserCardUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateWithoutStudySessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutSubtopicNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutSubtopicNestedInput
  }

  export type ContestCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    editalFileId?: string | null
    parsedEditalData?: string | null
    processingError?: string | null
    isProcessing?: boolean
    targetDate?: Date | string | null
    examDate?: string | null
    selectedOffice?: string | null
    institution?: string | null
    position?: string | null
    noticeStorageId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CardCreateManyCreatorInput = {
    id?: string
    subtopicId: string
    front: string
    back: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardCreateManyUserInput = {
    id?: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestTopicCreateManyUserInput = {
    id?: string
    contestId: string
    topicId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudySessionCreateManyUserInput = {
    id?: string
    cardId: string
    contestId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type ContestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contestTopics?: ContestTopicUpdateManyWithoutContestNestedInput
    userCards?: UserCardUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUpdateManyWithoutContestNestedInput
  }

  export type ContestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contestTopics?: ContestTopicUncheckedUpdateManyWithoutContestNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutContestNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutContestNestedInput
  }

  export type ContestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    editalFileId?: NullableStringFieldUpdateOperationsInput | string | null
    parsedEditalData?: NullableStringFieldUpdateOperationsInput | string | null
    processingError?: NullableStringFieldUpdateOperationsInput | string | null
    isProcessing?: BoolFieldUpdateOperationsInput | boolean
    targetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    examDate?: NullableStringFieldUpdateOperationsInput | string | null
    selectedOffice?: NullableStringFieldUpdateOperationsInput | string | null
    institution?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    noticeStorageId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtopic?: SubtopicUpdateOneRequiredWithoutCardsNestedInput
    userCards?: UserCardUpdateManyWithoutCardNestedInput
    studySessions?: StudySessionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subtopicId?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCards?: UserCardUncheckedUpdateManyWithoutCardNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    subtopicId?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutUserCardsNestedInput
    contest?: ContestUpdateOneRequiredWithoutUserCardsNestedInput
    subtopic?: SubtopicUpdateOneWithoutUserCardsNestedInput
  }

  export type UserCardUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contest?: ContestUpdateOneRequiredWithoutContestTopicsNestedInput
    topic?: TopicUpdateOneRequiredWithoutContestTopicsNestedInput
  }

  export type ContestTopicUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutStudySessionsNestedInput
    contest?: ContestUpdateOneRequiredWithoutStudySessionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutStudySessionsNestedInput
  }

  export type StudySessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicCreateManyContestInput = {
    id?: string
    topicId: string
    userId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardCreateManyContestInput = {
    id?: string
    userId: string
    cardId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudySessionCreateManyContestInput = {
    id?: string
    userId: string
    cardId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type ContestTopicUpdateWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: TopicUpdateOneRequiredWithoutContestTopicsNestedInput
    user?: UserUpdateOneRequiredWithoutContestTopicsNestedInput
  }

  export type ContestTopicUncheckedUpdateWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicUncheckedUpdateManyWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    topicId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUpdateWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCardsNestedInput
    card?: CardUpdateOneRequiredWithoutUserCardsNestedInput
    subtopic?: SubtopicUpdateOneWithoutUserCardsNestedInput
  }

  export type UserCardUncheckedUpdateWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUncheckedUpdateManyWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUpdateWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudySessionsNestedInput
    card?: CardUpdateOneRequiredWithoutStudySessionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutStudySessionsNestedInput
  }

  export type StudySessionUncheckedUpdateWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUncheckedUpdateManyWithoutContestInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubtopicCreateManyTopicInput = {
    id?: string
    name: string
    description?: string | null
    priority?: number | null
    estimatedCards?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContestTopicCreateManyTopicInput = {
    id?: string
    contestId: string
    userId: string
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubtopicUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUpdateManyWithoutSubtopicNestedInput
    userCards?: UserCardUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cards?: CardUncheckedUpdateManyWithoutSubtopicNestedInput
    userCards?: UserCardUncheckedUpdateManyWithoutSubtopicNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutSubtopicNestedInput
  }

  export type SubtopicUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    estimatedCards?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contest?: ContestUpdateOneRequiredWithoutContestTopicsNestedInput
    user?: UserUpdateOneRequiredWithoutContestTopicsNestedInput
  }

  export type ContestTopicUncheckedUpdateWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContestTopicUncheckedUpdateManyWithoutTopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardCreateManySubtopicInput = {
    id?: string
    front: string
    back: string
    createdBy: string
    repetitions?: number
    easeFactor?: number
    interval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCardCreateManySubtopicInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudySessionCreateManySubtopicInput = {
    id?: string
    userId: string
    cardId: string
    contestId: string
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type CardUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    userCards?: UserCardUpdateManyWithoutCardNestedInput
    studySessions?: StudySessionUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userCards?: UserCardUncheckedUpdateManyWithoutCardNestedInput
    studySessions?: StudySessionUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    front?: StringFieldUpdateOperationsInput | string
    back?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCardsNestedInput
    card?: CardUpdateOneRequiredWithoutUserCardsNestedInput
    contest?: ContestUpdateOneRequiredWithoutUserCardsNestedInput
  }

  export type UserCardUncheckedUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUncheckedUpdateManyWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudySessionsNestedInput
    card?: CardUpdateOneRequiredWithoutStudySessionsNestedInput
    contest?: ContestUpdateOneRequiredWithoutStudySessionsNestedInput
  }

  export type StudySessionUncheckedUpdateWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUncheckedUpdateManyWithoutSubtopicInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardCreateManyCardInput = {
    id?: string
    userId: string
    contestId: string
    subtopicId?: string | null
    nextReviewTime?: Date | string | null
    repetitions?: number
    easeFactor?: number
    interval?: number
    lastReviewed?: Date | string | null
    totalCorrectReviews?: number
    totalIncorrectReviews?: number
    nextReview?: Date | string | null
    correctStreak?: number
    incorrectStreak?: number
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudySessionCreateManyCardInput = {
    id?: string
    userId: string
    contestId: string
    subtopicId?: string | null
    reviewTime: Date | string
    quality: number
    easeFactor: number
    interval: number
    repetitions: number
    correct: boolean
    createdAt?: Date | string
  }

  export type UserCardUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserCardsNestedInput
    contest?: ContestUpdateOneRequiredWithoutUserCardsNestedInput
    subtopic?: SubtopicUpdateOneWithoutUserCardsNestedInput
  }

  export type UserCardUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCardUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    nextReviewTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    repetitions?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    lastReviewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCorrectReviews?: IntFieldUpdateOperationsInput | number
    totalIncorrectReviews?: IntFieldUpdateOperationsInput | number
    nextReview?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    correctStreak?: IntFieldUpdateOperationsInput | number
    incorrectStreak?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStudySessionsNestedInput
    contest?: ContestUpdateOneRequiredWithoutStudySessionsNestedInput
    subtopic?: SubtopicUpdateOneWithoutStudySessionsNestedInput
  }

  export type StudySessionUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contestId?: StringFieldUpdateOperationsInput | string
    subtopicId?: NullableStringFieldUpdateOperationsInput | string | null
    reviewTime?: DateTimeFieldUpdateOperationsInput | Date | string
    quality?: IntFieldUpdateOperationsInput | number
    easeFactor?: FloatFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    repetitions?: IntFieldUpdateOperationsInput | number
    correct?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContestCountOutputTypeDefaultArgs instead
     */
    export type ContestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopicCountOutputTypeDefaultArgs instead
     */
    export type TopicCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopicCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubtopicCountOutputTypeDefaultArgs instead
     */
    export type SubtopicCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubtopicCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardCountOutputTypeDefaultArgs instead
     */
    export type CardCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContestDefaultArgs instead
     */
    export type ContestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TopicDefaultArgs instead
     */
    export type TopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TopicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubtopicDefaultArgs instead
     */
    export type SubtopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubtopicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CardDefaultArgs instead
     */
    export type CardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCardDefaultArgs instead
     */
    export type UserCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContestTopicDefaultArgs instead
     */
    export type ContestTopicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContestTopicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudySessionDefaultArgs instead
     */
    export type StudySessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudySessionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}