// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String?
  password         String
  subscriptionTier String   @default("free") // "free" | "paid"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  contests     Contest[]
  cards        Card[]
  userCards    UserCard[]
  contestTopics ContestTopic[]

  @@map("users")
}

model Contest {
  id                String   @id @default(cuid())
  userId            String
  name              String
  description       String?
  editalFileId      String?  // Reference to file storage
  parsedEditalData  String?  // Store structured data from edital as JSON string
  processingError   String?
  isProcessing      Boolean  @default(false)
  targetDate        DateTime?
  examDate          String?
  selectedOffice    String?
  noticeStorageId   String?  // Reference to file storage
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contestTopics ContestTopic[]
  userCards     UserCard[]

  @@map("contests")
}

model Topic {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subtopics     Subtopic[]
  contestTopics ContestTopic[]

  @@map("topics")
}

model Subtopic {
  id          String   @id @default(cuid())
  topicId     String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  topic     Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  cards     Card[]
  userCards UserCard[]

  @@unique([topicId, name])
  @@map("subtopics")
}

model Card {
  id          String   @id @default(cuid())
  subtopicId  String
  front       String
  back        String
  createdBy   String
  repetitions Int      @default(0)
  easeFactor  Float    @default(2.5)
  interval    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subtopic  Subtopic   @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  creator   User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  userCards UserCard[]

  @@map("cards")
}

model UserCard {
  id                     String    @id @default(cuid())
  userId                 String
  cardId                 String
  contestId              String
  subtopicId             String?
  nextReviewTime         DateTime?
  repetitions            Int       @default(0)
  easeFactor             Float     @default(2.5)
  interval               Int       @default(1)
  lastReviewed           DateTime?
  totalCorrectReviews    Int       @default(0)
  totalIncorrectReviews  Int       @default(0)
  nextReview             DateTime?
  correctStreak          Int       @default(0)
  incorrectStreak        Int       @default(0)
  status                 String    @default("new") // "new" | "learning" | "review" | "graduated"
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  card     Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  contest  Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  subtopic Subtopic? @relation(fields: [subtopicId], references: [id], onDelete: SetNull)

  @@unique([userId, cardId])
  @@map("user_cards")
}

model ContestTopic {
  id        String   @id @default(cuid())
  contestId String
  topicId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  topic   Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contestId, topicId])
  @@map("contest_topics")
}

